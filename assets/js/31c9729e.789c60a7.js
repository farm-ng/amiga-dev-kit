"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[6740],{9197:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=i(5893),s=i(1151);const r={id:"filter-client",title:"Filter Client"},a=void 0,o={id:"examples/filter_client/filter-client",title:"Filter Client",description:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:",source:"@site/docs/examples/filter_client/README.md",sourceDirName:"examples/filter_client",slug:"/examples/filter_client/",permalink:"/docs/examples/filter_client/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/filter_client/README.md",tags:[],version:"current",frontMatter:{id:"filter-client",title:"Filter Client"},sidebar:"examples",previous:{title:"File Reader GPS",permalink:"/docs/examples/file_reader_gps/"},next:{title:"Record a Track",permalink:"/docs/examples/record_track/"}},l={},c=[{value:"Link to <code>filter_client/main.py</code>",id:"link-to-filter_clientmainpy",level:3},{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Install the example&#39;s dependencies",id:"2-install-the-examples-dependencies",level:3},{value:"3. Execute the Python script",id:"3-execute-the-python-script",level:3},{value:"4. Customize the run",id:"4-customize-the-run",level:3},{value:"5. Code overview",id:"5-code-overview",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{title:"Basic Knowledge Requirements",type:"info",children:[(0,t.jsx)(n.p,{children:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python Programming"}),": It's important to have a good grasp of Python, especially with concepts\nlike ",(0,t.jsx)(n.code,{children:"functions"}),", ",(0,t.jsx)(n.code,{children:"loops"}),", and ",(0,t.jsx)(n.code,{children:"classes"}),", since the example utilizes these fundamentals."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Asynchronous Programming with asyncio"}),": Familiarity with Python's asyncio for writing concurrent\ncode using the ",(0,t.jsx)(n.code,{children:"async/await"})," syntax."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/docs/concepts/filter_service/",children:"farm-ng Filter Service Overview"})}),":\nThis overview provides a base understanding of the gRPC service the client you create will connect to."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/concepts/transforms_and_poses/",children:(0,t.jsx)(n.strong,{children:"farm-ng Transforms & Poses Overview"})}),":\nThis overview provides insight into coordinate frames, transforms,\nand poses as they pertain to autonomous systems and autonomous navigation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Knowledge of State Estimation and Uncertainty"}),": The example deals with concepts of state estimation\n(pose, orientation) and the associated uncertainties.\nUnderstanding these concepts is important for interpreting the received data and how these\nmight be used in downstream applications or enhancements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Understanding of Kalman Filters, specifically the Unscented Kalman Filter (UKF)"}),":\nThe client in this example is receiving state estimates that are the result of UKF computations.\nIt may be helpful to understand how UKFs work, their limitations and functionalities."]}),"\n"]})]}),"\n",(0,t.jsx)(n.h3,{id:"link-to-filter_clientmainpy",children:(0,t.jsxs)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/filter_client/main.py",children:["Link to ",(0,t.jsx)(n.code,{children:"filter_client/main.py"})]})}),"\n",(0,t.jsx)(n.p,{children:"This example streams the results from the state estimation filter running on the Amiga."}),"\n",(0,t.jsxs)(n.p,{children:["The requirements to run this example are to have a\n",(0,t.jsx)(n.a,{href:"/docs/brain/",children:(0,t.jsx)(n.strong,{children:"farm-ng brain"})})," running the ",(0,t.jsx)(n.code,{children:"filter service"}),".\nThe filter service will output the state, even if state estimation results are poor,\nas will be the case if certain data streams from device services are missing."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"The state estimation filter service is a client of the following services:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"canbus"}),"\n",(0,t.jsx)(n.li,{children:"gps"}),"\n",(0,t.jsx)(n.li,{children:"oak0"}),"\n"]})]}),"\n",(0,t.jsxs)(n.h3,{id:"1-install-the-farm-ng-brain-adk-package",children:["1. Install the ",(0,t.jsx)(n.a,{href:"/docs/brain/brain-install",children:"farm-ng Brain ADK package"})]}),"\n",(0,t.jsx)(n.h3,{id:"2-install-the-examples-dependencies",children:"2. Install the example's dependencies"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/filter_client\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip3 install -r requirements.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-execute-the-python-script",children:"3. Execute the Python script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3 main.py --service-config service_config.json\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["By default, the host address is assumed to be ",(0,t.jsx)(n.code,{children:"localhost"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"4-customize-the-run",children:"4. Customize the run"}),"\n",(0,t.jsx)(n.p,{children:"Let's have some fun and stream the state to your laptop over the Wifi,\nusing the gRPC client."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You need to discover the WiFi address of your Amiga Brain using\nthe ",(0,t.jsx)(n.code,{children:"WifiClient"})," (coming soon)"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3 main.py --help\n\n# usage: amiga-filter-stream [-h] --service-config SERVICE_CONFIG\n\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --service-config SERVICE_CONFIG\n#                         The filter service config.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To customize the run, you need to update the ",(0,t.jsx)(n.code,{children:"service_config.json"}),"\nby modifying the ",(0,t.jsx)(n.code,{children:"host"})," and ",(0,t.jsx)(n.code,{children:"port"})," fields."]}),"\n",(0,t.jsx)(n.h3,{id:"5-code-overview",children:"5. Code overview"}),"\n",(0,t.jsxs)(n.p,{children:["In this example we use the ",(0,t.jsx)(n.code,{children:"EventClient"})," with the ",(0,t.jsx)(n.code,{children:"subscribe"})," method to receive the filter state stream."]}),"\n",(0,t.jsx)(n.p,{children:"In this example, we:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Extract the timestamp from when the state estimation filter sent the pose","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Which is immediately after it estimates the state"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Create a ",(0,t.jsx)(n.code,{children:"Pose3F64"})," object, a C++ object in ",(0,t.jsx)(n.code,{children:"farm-ng-core"})," made available through pybind"]}),"\n",(0,t.jsx)(n.li,{children:"Extract other important state values, including the uncertainty or confidence in the state estimate"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def main(service_config_path: Path) -> None:\n    """Run the filter service client.\n    Args:\n        service_config_path (Path): The path to the filter service config.\n    """\n    # create a client to the filter service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    async for event, message in EventClient(config).subscribe(config.subscriptions[0], decode=True):\n        # Find the monotonic service send timestamp (this is the time the filter calculated the state),\n        # or the first timestamp if not available.\n        stamp = (\n            get_stamp_by_semantics_and_clock_type(event, StampSemantics.SERVICE_SEND, "monotonic")\n            or event.timestamps[0].stamp\n        )\n\n        # Unpack the filter state message\n        pose: Pose3F64 = Pose3F64.from_proto(message.pose)\n        orientation: float = message.heading\n        uncertainties: list[float] = [message.uncertainty_diagonal.data[i] for i in range(3)]\n\n        # Print some key details about the filter state\n        print("\\n###################")\n        print(f"Timestamp: {stamp}")\n        print("Filter state received with pose:")\n        print(f"x: {pose.translation[0]:.3f} m, y: {pose.translation[1]:.3f} m,\n                                                orientation: {orientation:.3f} rad")\n        print(f"Parent frame: {pose.frame_a} -> Child frame: {pose.frame_b}")\n        print(f"Filter has converged: {message.has_converged}")\n        print("And pose uncertainties:")\n        print(f"x: {uncertainties[0]:.3f} m, y: {uncertainties[1]:.3f} m,\n                                             orientation: {uncertainties[2]:.3f} rad")\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-filter-stream")\n    parser.add_argument("--service-config", type=Path, required=True, help="The filter service config.")\n    args = parser.parse_args()\n\n    asyncio.run(main(args.service_config))\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["We highly recommend to have some basic knowledge about\n",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio.html",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"asyncio"})})}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var t=i(7294);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);