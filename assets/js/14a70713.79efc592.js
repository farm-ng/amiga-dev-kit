"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[1399],{494:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=t(5893),n=t(1151);const s={id:"virtual-joystick-widget",title:"01 - Widget"},l="Building Virtual Joystick Widget",r={id:"tutorials/virtual_joystick/virtual-joystick-widget",title:"01 - Widget",description:"We will begin by defining a custom widget, the VirtualJoystickWidget,",source:"@site/docs/tutorials/virtual_joystick/01_virtual_joystick_widget.md",sourceDirName:"tutorials/virtual_joystick",slug:"/tutorials/virtual_joystick/virtual-joystick-widget",permalink:"/docs/tutorials/virtual_joystick/virtual-joystick-widget",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/tutorials/virtual_joystick/01_virtual_joystick_widget.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"virtual-joystick-widget",title:"01 - Widget"},sidebar:"examples",previous:{title:"00 - Virtual Joystick Overview",permalink:"/docs/tutorials/virtual_joystick/virtual-joystick-overview"},next:{title:"02 - Main Implementation",permalink:"/docs/tutorials/virtual_joystick/device-streams"}},c={},d=[{value:"Virtual Joystick App Structure",id:"virtual-joystick-app-structure",level:2},{value:"Building the widget in libs/virtual_joystick",id:"building-the-widget-in-libsvirtual_joystick",level:2},{value:"New File: virtual_joystick/res/virtual_joystick.kv",id:"new-file-virtual_joystickresvirtual_joystickkv",level:2},{value:"virtual_joystick.kv",id:"virtual_joystickkv",level:3},{value:"New File: virtual_joystick/utils.py",id:"new-file-virtual_joystickutilspy",level:2},{value:"utils.py",id:"utilspy",level:3},{value:"New File: virtual_joystick/virtual_joystick.py",id:"new-file-virtual_joystickvirtual_joystickpy",level:2},{value:"Imports",id:"imports",level:3},{value:"New Class: VirtualJoystickWidget",id:"new-class-virtualjoystickwidget",level:3},{value:"Update Kivy Method: on_touch_down()",id:"update-kivy-method-on_touch_down",level:3},{value:"Update Kivy Method: on_touch_move()",id:"update-kivy-method-on_touch_move",level:3},{value:"Update Kivy Method: on_touch_up()",id:"update-kivy-method-on_touch_up",level:3},{value:"New Method: update_joystick_pose()",id:"new-method-update_joystick_pose",level:3},{value:"New Method: relative_cord_in_widget()",id:"new-method-relative_cord_in_widget",level:3},{value:"New Method: draw_joystick()",id:"new-method-draw_joystick",level:3},{value:"More Information",id:"more-information",level:2},{value:"Builder",id:"builder",level:3},{value:"kivy <code>Clock</code>",id:"kivy-clock",level:3},{value:"Touch handling",id:"touch-handling",level:3}];function a(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h1,{id:"building-virtual-joystick-widget",children:"Building Virtual Joystick Widget"}),"\n",(0,o.jsxs)(i.p,{children:["We will begin by defining a custom widget, the ",(0,o.jsx)(i.code,{children:"VirtualJoystickWidget"}),",\nby following the kivy API to add widgets to our application!"]}),"\n",(0,o.jsx)(i.p,{children:"This widget will be used to drive the robot by moving the virtual\njoystick on the Brain screen.\nThe driving behavior is modelled after the behavior of driving\nwith the joystick on the pendant."}),"\n",(0,o.jsx)(i.admonition,{type:"info",children:(0,o.jsxs)(i.p,{children:["If you ever feel lost, please refer to the ",(0,o.jsx)(i.a,{href:"https://github.com/farm-ng/virtual-joystick-v2/tree/main",children:(0,o.jsx)(i.code,{children:"Virtual-Joystick Repository"})}),"."]})}),"\n",(0,o.jsx)(i.h2,{id:"virtual-joystick-app-structure",children:"Virtual Joystick App Structure"}),"\n",(0,o.jsx)(i.p,{children:"In this tutorial, it is expected that you are familiear with the previous camera-streamer example."}),"\n",(0,o.jsx)(i.p,{children:"We will be adding files to libs/ to build our custom kivy widget. By the end of this tutorial,\nyour file tree should look like this."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"Virtual-Joystick-v2/  # Root level of the project.\n\u251c\u2500\u2500 libs/ # Contains private libraries.\n|   \u251c\u2500\u2500 amiga_packages/ # placeholder for other template packages\n|   \u2514\u2500\u2500 virtual_joystick/ # virtual joystick package we'll build\n|       \u251c\u2500\u2500 res/\n|       |   \u2514\u2500\u2500 virtual_joystick.kv # kivy virtual joystick frontend\n|       \u251c\u2500\u2500 joystick.py # kivy virtual joystick backend\n|       \u2514\u2500\u2500 utils.py # helper functions for joystick\n\u251c\u2500\u2500 src/ # Contains all code needed to run the main gui application.\n|   \u251c\u2500\u2500 assets/  # Contains files needed to run the application\n|   |   \u2514\u2500\u2500 app_logo.png  # static images or images for buttons.\n|   \u251c\u2500\u2500 res/  # Contains the layout files and UI strings.\n|   |   \u2514\u2500\u2500 main.kv  # main ui layout in Kivy languague\n|   \u2514\u2500\u2500 main.py  # Is the main entry point for the gui application.\n\u251c\u2500\u2500 test/  # Contains code for test of the private libs.\n|   \u2514\u2500\u2500 test_dummy.py  # sets of unit test\n\u251c\u2500\u2500 install.sh\n|    # The script to install the app on the brain.\n\u251c\u2500\u2500 uninstall.sh\n|    # The script to uninstall the app from the brain.\n\u251c\u2500\u2500 manifest.json\n|    # The file containing the metadata of the app to register it on the brain.\n\u251c\u2500\u2500 entry.sh\n|    # The script to setup the project, create a virtual env. and install dependencies.\n\u2514\u2500\u2500 setup.cfg\n    # The file containing the metadata of the package, including the name, versioning,\n    # etc. Learn more here: https://setuptools.pypa.io/en/latest/userguide/declarative_config.html\n\n"})}),"\n",(0,o.jsx)(i.h2,{id:"building-the-widget-in-libsvirtual_joystick",children:"Building the widget in libs/virtual_joystick"}),"\n",(0,o.jsx)(i.p,{children:"By the end of this section, our virtual_joystick will look something like this:"}),"\n",(0,o.jsx)("div",{align:"center",children:(0,o.jsx)(i.p,{children:(0,o.jsx)(i.img,{src:"https://github.com/farm-ng/amiga-dev-kit/assets/53889589/e574c53a-39bf-4784-b010-8a0e24e3dfd9",alt:"virtualJoystick"})})}),"\n",(0,o.jsx)(i.p,{children:"We will need to add a few files in order to get there. All of the files\nfor the joystick widget will be stored in libs/virtual_joystick. This will make\nit easiest to organize our project. We recommend you do the same for any and all\ncustom widgets you hope to add to your custom application."}),"\n",(0,o.jsx)(i.h2,{id:"new-file-virtual_joystickresvirtual_joystickkv",children:"New File: virtual_joystick/res/virtual_joystick.kv"}),"\n",(0,o.jsx)(i.p,{children:"Within the folder libs/virtual_joystick/res, create a file called virtual_joystick.kv\nand add the following content."}),"\n",(0,o.jsx)(i.h3,{id:"virtual_joystickkv",children:"virtual_joystick.kv"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:"<VirtualJoystickWidget>:\n    joystick_diameter: 200\n    joystick_position_x: 0\n    joystick_position_y: 0\n    canvas:\n        Color:\n            rgba: 0.2, 0.2, 0.2, 1.0\n        Ellipse:\n            id: background_ellipse\n            pos: root.center_x - root.width // 2, root.center_y - root.height // 2\n            size: root.width, root.height\n        Color:\n            rgba: 1.0, 1.0, 0.0, 1.0\n        Ellipse:\n            id: joystick\n            pos: root.joystick_position_x, root.joystick_position_y\n            size: root.joystick_diameter, root.joystick_diameter\n"})}),"\n",(0,o.jsxs)(i.p,{children:["You can think of this similar to a class, where there are a few instance variables\nassigned to each instacnce of the ",(0,o.jsx)(i.code,{children:"<VirtualJoystickWidget>"}),". These are, diameter, position_x\nand position_y. These are variables we will access to draw our joystick but also querry\nits position on the screen."]}),"\n",(0,o.jsx)(i.h2,{id:"new-file-virtual_joystickutilspy",children:"New File: virtual_joystick/utils.py"}),"\n",(0,o.jsx)(i.p,{children:"Writing modules is avery useful tool in python so we decided to add one to this example.\nIn this example, a module is a python file that contains methods. They are used for code\nreadbility and making programs modular."}),"\n",(0,o.jsx)(i.p,{children:"Once you have created the file utils.py, copy the following code:"}),"\n",(0,o.jsx)(i.h3,{id:"utilspy",children:"utils.py"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'class Vec2:\n    """Simple container for keeping joystick coords in x & y terms.\n\n    Defaults to a centered joystick (0,0). Clips values to range [-1.0, 1.0], as with the Amiga joystick.\n    """\n\n    def __init__(self, x: float = 0.0, y: float = 0.0) -> None:\n        self.x: float = min(max(-1.0, x), 1.0)\n        self.y: float = min(max(-1.0, y), 1.0)\n\n    def __str__(self) -> str:\n        return f"({self.x:0.2f}, {self.y:0.2f})"\n'})}),"\n",(0,o.jsx)(i.p,{children:"This creates a class called Vec2. What this allows us to is make a Vec2 object in the future.\nIt will make more sense as the tutorial continues. The class Vec2() will store the coordinates\nof joystick bounded between -1 and 1."}),"\n",(0,o.jsx)(i.h2,{id:"new-file-virtual_joystickvirtual_joystickpy",children:"New File: virtual_joystick/virtual_joystick.py"}),"\n",(0,o.jsx)(i.p,{children:"Now that our kivy string is defined, we can define the features of our widget in python.\nThese methods will allow us from our main app to read the state of our joystick.\nThis section includes all the sequential blocks of code to build this file. Feel free\nto refer to the repository if you get lost in the chaos."}),"\n",(0,o.jsx)(i.h3,{id:"imports",children:"Imports"}),"\n",(0,o.jsx)(i.p,{children:"Similar to the previous examples, we will need some external libraries. The top of this\nfile should look like this:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'import os\nfrom math import sqrt\nfrom typing import Tuple\n\nfrom virtual_joystick.utils import Vec2\n\n# Must come before kivy imports\nos.environ["KIVY_NO_ARGS"] = "1"\n\nfrom kivy.clock import Clock  # noqa: E402\nfrom kivy.input.providers.mouse import MouseMotionEvent  # noqa: E402\nfrom kivy.lang.builder import Builder  # noqa: E402\nfrom kivy.uix.widget import Widget  # noqa: E402\n'})}),"\n",(0,o.jsx)(i.p,{children:"We are importing a method called Vec2 from virtual_joystick.utils. This is a good introduction\nto building modules in python."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:"from virtual_joystick.utils import Vec2\n"})}),"\n",(0,o.jsx)(i.p,{children:"This means, from within the folder, virtual_joystick, import the utils file. From utils, import\nthe class Vec2. This will allow us to create Vec2 objects from within virtual_joystick.py."}),"\n",(0,o.jsx)(i.h3,{id:"new-class-virtualjoystickwidget",children:"New Class: VirtualJoystickWidget"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'class VirtualJoystickWidget(Widget):\n    def __init__(self, **kwargs) -> None:\n        super(VirtualJoystickWidget, self).__init__(**kwargs)\n\n        self.joystick_pose: Vec2 = Vec2()\n\n        # Schedule the drawing of the joystick at 30 hz\n        Clock.schedule_interval(self.draw_joystick, 1 / 30)\n\n        # Build the .kv file for this VirtualJoystickWidget\n        # This is so it is included when your app imports the VirtualJoystickWidget\n        Builder.load_file(os.path.join(os.path.dirname(__file__), "res/joystick.kv"))\n'})}),"\n",(0,o.jsx)(i.p,{children:"There is a lot going on in this initialization. But most simply, it sets up the superclass\nof this Widget Class. Next, we create an instance of Vec2 called self.joystick_pose. This\nwill store the position of our joystick in (x,y) coordinates."}),"\n",(0,o.jsx)(i.p,{children:"Clock, is the kivy eventloop. This is used to schedule updates of the user interface at 30 Hz."}),"\n",(0,o.jsx)(i.p,{children:"Finally, we use the Builder module from kivy to build our joystick widget."}),"\n",(0,o.jsx)(i.h3,{id:"update-kivy-method-on_touch_down",children:"Update Kivy Method: on_touch_down()"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'    def on_touch_down(self, touch: MouseMotionEvent) -> None:\n        """Overwrite kivy method that handles initial press with mouse click or touchscreen.\n\n        NOTE: This is called regardless of whether this is the touched widget.\n        """\n        # Check if touch is in this widget using kivy ``collide_point`` method\n        if not self.collide_point(*touch.pos):\n            return\n\n        self.update_joystick_pose(touch)\n'})}),"\n",(0,o.jsx)(i.p,{children:"This method takes a touch event generated by kivy every time the screen is pressed,\nthe coordinates are passed to self.update_joystick_pose() method."}),"\n",(0,o.jsxs)(i.p,{children:["More info can be found here:\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.on_touch_down",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"on_touch_down()"})})})]}),"\n",(0,o.jsx)(i.h3,{id:"update-kivy-method-on_touch_move",children:"Update Kivy Method: on_touch_move()"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'    def on_touch_move(self, touch: MouseMotionEvent) -> None:\n        """Overwrite kivy method that handles when press is held and dragged with mouse click or touchscreen.\n\n        NOTE: This is called regardless of whether this is the touched widget.\n        """\n        # Check if touch is in this widget using kivy ``collide_point`` method\n        if not self.collide_point(*touch.pos):\n            return\n\n        self.update_joystick_pose(touch)\n'})}),"\n",(0,o.jsx)(i.p,{children:"You can see that this method performs the same operation as\non_touch_down(), however it is used to handle when\na touch is held."}),"\n",(0,o.jsxs)(i.p,{children:["More info can be found here:\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.on_touch_move",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"on_touch_move()"})})})]}),"\n",(0,o.jsx)(i.h3,{id:"update-kivy-method-on_touch_up",children:"Update Kivy Method: on_touch_up()"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'    def on_touch_up(self, touch: MouseMotionEvent) -> None:\n        """Overwrite kivy method that handles release of press with mouse click or touchscreen.\n\n        NOTE: This is called regardless of whether this is the touched widget.\n        """\n        # Reset joystick pose, regardless of where touch_up occurs\n        self.joystick_pose = Vec2()\n'})}),"\n",(0,o.jsx)(i.p,{children:"This method resets the position of the joystick when the screen is no longer being depressed."}),"\n",(0,o.jsxs)(i.p,{children:["More info can be found here:\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.on_touch_up",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"on_touch_up()"})})})]}),"\n",(0,o.jsx)(i.h3,{id:"new-method-update_joystick_pose",children:"New Method: update_joystick_pose()"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'    def update_joystick_pose(self, touch: MouseMotionEvent) -> None:\n        assert self.collide_point(*touch.pos), "Only pass touches "\n\n        res: Tuple[float, float] = self.relative_cord_in_widget(touch)\n\n        # Clip to unit circle\n        div: float = max(1.0, sqrt(res[0] ** 2 + res[1] ** 2))\n        self.joystick_pose = Vec2(x=res[0] / div, y=res[1] / div)\n'})}),"\n",(0,o.jsx)(i.p,{children:"When you press, hold and move your finger, this method is responsible for\ntaking that motion and converting it to a Vec2() object to let kivy know where to\nmove the yellow icon. div is used to normalize the motion to that on the unit circle."}),"\n",(0,o.jsx)(i.h3,{id:"new-method-relative_cord_in_widget",children:"New Method: relative_cord_in_widget()"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'    def relative_cord_in_widget(self, touch: MouseMotionEvent) -> Tuple[float, float]:\n        """Returns the coordinates of the touch on the scale IFF it occurs within the bounds of the widget."""\n\n        # Range to put the values on\n        scale: Tuple[float, float] = (-1.0, 1.0)\n\n        # Map coord onto scale range\n        return (\n            scale[0] + (touch.x - self.pos[0]) * (scale[1] - scale[0]) / (self.width),\n            scale[0] + (touch.y - self.pos[1]) * (scale[1] - scale[0]) / (self.height),\n        )\n'})}),"\n",(0,o.jsx)(i.p,{children:"This method is used to ensure that the joystick only moves when TouchEvents have occurred\nwithin the bounds of the widget."}),"\n",(0,o.jsx)(i.h3,{id:"new-method-draw_joystick",children:"New Method: draw_joystick()"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-python",children:'    def draw_joystick(self, dt: float = 0.0):\n        """Update the drawn pose of the joystick, in pixel coords."""\n        self.joystick_position_x = (\n            self.center_x\n            + 0.5 * self.joystick_pose.x * (self.width - self.joystick_diameter)\n            - self.joystick_diameter // 2\n        )\n\n        self.joystick_position_y = (\n            self.center_y\n            + 0.5 * self.joystick_pose.y * (self.height - self.joystick_diameter)\n            - self.joystick_diameter // 2\n        )\n'})}),"\n",(0,o.jsx)(i.p,{children:"The final function we have is draw_joystick(). This method is called by the Clock at\na frequency of 30Hz. This updates the coordinates of the yellow circle in the virtual joysick."}),"\n",(0,o.jsx)(i.h2,{id:"more-information",children:"More Information"}),"\n",(0,o.jsx)(i.h3,{id:"builder",children:"Builder"}),"\n",(0,o.jsxs)(i.p,{children:["By building the ",(0,o.jsx)(i.code,{children:".kv"})," definition of the ",(0,o.jsx)(i.code,{children:"VirtualJoystickWidget"}),"\nin the Python constructor,\nthe widget can be imported just like a kivy API widget.\nThat means you can import it into your Python definition of your\n",(0,o.jsx)(i.code,{children:"App"})," (i.e., ",(0,o.jsx)(i.code,{children:"main.py"}),"), and reference it both there and in your\nkivy app definition (i.e., ",(0,o.jsx)(i.code,{children:"main.kv"}),")"]}),"\n",(0,o.jsxs)(i.p,{children:["Explore\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.lang.builder.html",children:(0,o.jsxs)(i.strong,{children:["kivy ",(0,o.jsx)(i.code,{children:"Builder"})]})}),"\nfor more details."]}),"\n",(0,o.jsxs)(i.h3,{id:"kivy-clock",children:["kivy ",(0,o.jsx)(i.code,{children:"Clock"})]}),"\n",(0,o.jsxs)(i.p,{children:["We schedule regular updates to the linked variables containing\nthe pose of the drawn joystick using the ",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.clock.html",children:(0,o.jsx)(i.strong,{children:"kivy Clock"})}),".\nkivy provides multiple options for scheduling tasks, which you\ncan explore in their API."]}),"\n",(0,o.jsxs)(i.p,{children:["Updating these linked values will cause the drawn Widget to\nautomatically update.\nYou could alternatively update these values as they are\ncalculated in the touch handling methods if you don't want to use\nthe kivy ",(0,o.jsx)(i.code,{children:"Clock"}),"."]}),"\n",(0,o.jsxs)(i.admonition,{type:"caution",children:[(0,o.jsx)(i.p,{children:"Do not schedule long running, blocking tasks with the kivy clock\nor you will freeze the app while the task executes.\nThe kivy clock (which runs on the main loop) should only be used\nto schedule very quick actions."}),(0,o.jsxs)(i.p,{children:["Blocking tasks should be scheduled as an ",(0,o.jsx)(i.code,{children:"asyncio"})," task!"]})]}),"\n",(0,o.jsx)(i.h3,{id:"touch-handling",children:"Touch handling"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.on_touch_down",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"on_touch_down()"})})}),",\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.on_touch_move",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"on_touch_move()"})})}),",\nand\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.on_touch_up",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"on_touch_up()"})})}),"\ncalls are triggered for all ",(0,o.jsx)(i.code,{children:"Widget"}),"s within a kivy ",(0,o.jsx)(i.code,{children:"App"})," whenever there is a touch interaction (by default)."]}),"\n",(0,o.jsxs)(i.p,{children:["We overwrite the default behavior of these methods to move the\npose of the joystick whenever we touch and/or move within the\n",(0,o.jsx)(i.code,{children:"VirtualJoystickWidget"}),",\nand recenter the joystick upon release."]}),"\n",(0,o.jsxs)(i.p,{children:["From the ",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html",children:(0,o.jsxs)(i.strong,{children:["kivy ",(0,o.jsx)(i.code,{children:"Widget"})," class docs"]})}),",\nwhich all widgets inherit from:"]}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"on_touch_down()"}),", ",(0,o.jsx)(i.code,{children:"on_touch_move()"}),", ",(0,o.jsx)(i.code,{children:"on_touch_up()"})," don\u2019t do\nany sort of collisions.\nIf you want to know if the touch is inside your widget, use\n",(0,o.jsx)(i.code,{children:"collide_point()"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(i.p,{children:["So we filter ",(0,o.jsx)(i.code,{children:"on_touch_down()"})," & ",(0,o.jsx)(i.code,{children:"on_touch_move()"})," with\n",(0,o.jsx)(i.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.widget.html#kivy.uix.widget.Widget.collide_point",children:(0,o.jsx)(i.strong,{children:(0,o.jsx)(i.code,{children:"collide_point()"})})}),"\nto only perform our custom behavior when the touch occurred within our ",(0,o.jsx)(i.code,{children:"VirtualJoystickWidget"}),"."]}),"\n",(0,o.jsxs)(i.p,{children:["Because we want to recenter the joystick regardless of which\nwidget the ",(0,o.jsx)(i.code,{children:"touch_up"})," occurred in, we do not filter\n",(0,o.jsx)(i.code,{children:"on_touch_up()"})," with ",(0,o.jsx)(i.code,{children:"collide_point()"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>l});var o=t(7294);const n={},s=o.createContext(n);function l(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);