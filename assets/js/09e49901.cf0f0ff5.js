"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7470],{1515:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=n(7462),i=(n(7294),n(3905));n(1839);const r={id:"camera-client",title:"Camera Client"},s=void 0,o={unversionedId:"examples/camera_client/camera-client",id:"examples/camera_client/camera-client",title:"Camera Client",description:"Link to cameraclient/main.py",source:"@site/docs/examples/camera_client/README.md",sourceDirName:"examples/camera_client",slug:"/examples/camera_client/",permalink:"/docs/examples/camera_client/",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/camera_client/README.md",tags:[],version:"current",frontMatter:{id:"camera-client",title:"Camera Client"},sidebar:"examples",previous:{title:"File Converter",permalink:"/docs/examples/file_converter/"},next:{title:"Camera Calibration",permalink:"/docs/examples/camera_calibration/"}},m={},c=[{value:"Link to <code>camera_client/main.py</code>",id:"link-to-camera_clientmainpy",level:3},{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Install the example&#39;s dependencies",id:"2-install-the-examples-dependencies",level:3},{value:"3. Execute the Python script",id:"3-execute-the-python-script",level:3},{value:"4. Customize the run",id:"4-customize-the-run",level:3},{value:"5. Code overview",id:"5-code-overview",level:3}],l={toc:c};function p(e){let{components:a,...n}=e;return(0,i.kt)("wrapper",(0,t.Z)({},l,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"link-to-camera_clientmainpy"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/py/examples/camera_client/main.py"},"Link to ",(0,i.kt)("inlineCode",{parentName:"a"},"camera_client/main.py"))),(0,i.kt)("p",null,"This example acts as an ",(0,i.kt)("inlineCode",{parentName:"p"},"OakCameraClient")," in a standalone Python\nscript."),(0,i.kt)("p",null,"The requirements to run this example are to have a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/brain/"},(0,i.kt)("strong",{parentName:"a"},"farm-ng brain"))," running Oak cameras and that\nyour PC is on the same local network as the brain."),(0,i.kt)("h3",{id:"1-install-the-farm-ng-brain-adk-package"},"1. Install the ",(0,i.kt)("a",{parentName:"h3",href:"/docs/brain/brain-install"},"farm-ng Brain ADK package")),(0,i.kt)("h3",{id:"2-install-the-examples-dependencies"},"2. Install the example's dependencies"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/camera_client\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -r requirements.txt\n")),(0,i.kt)("h3",{id:"3-execute-the-python-script"},"3. Execute the Python script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python3 main.py --service-config service_config.json\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"By default, the camera address is assumed to be ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost"),".")),(0,i.kt)("h3",{id:"4-customize-the-run"},"4. Customize the run"),(0,i.kt)("p",null,"Let's have some fun and stream the camera to your laptop over the\nWifi."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You need to discover the WiFi address of your Amiga Brain using\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"WifiClient")," (coming soon)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python3 main.py --help\n\n# usage: amiga-camera-stream [-h] --service-config SERVICE_CONFIG\n#\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --service-config SERVICE_CONFIG\n#                         The camera config.\n")),(0,i.kt)("p",null,"To customize the run, you need to update the ",(0,i.kt)("inlineCode",{parentName:"p"},"service_config.json"),"\nby modifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"host")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"port")," fields."),(0,i.kt)("h3",{id:"5-code-overview"},"5. Code overview"),(0,i.kt)("p",null,"In this example we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"EventClient")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe")," method to receive the camera stream."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'async def main(service_config_path: Path) -> None:\n    """Run the camera service client.\n\n    Args:\n        service_config_path (Path): The path to the camera service config.\n    """\n    # create a client to the camera service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    # instantiate the image decoder\n    image_decoder = ImageDecoder()\n\n    async for event, message in EventClient(config).subscribe(config.subscriptions[0], decode=True):\n        print(f"Timestamps: {event.timestamps[-2]}")\n        print(f"Meta: {message.meta}")\n        print("###################\\n")\n\n        # cast image data bytes to numpy and decode\n        image = np.from_dlpack(image_decoder.decode(message.image_data))\n\n        # visualize the image\n        cv2.namedWindow("image", cv2.WINDOW_NORMAL)\n        cv2.imshow("image", image)\n        cv2.waitKey(1)\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-camera-stream")\n    parser.add_argument("--service-config", type=Path, required=True, help="The camera config.")\n    args = parser.parse_args()\n\n    asyncio.run(main(args.service_config))\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We highly recommend to have some basic knowledge about\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},(0,i.kt)("strong",{parentName:"a"},(0,i.kt)("inlineCode",{parentName:"strong"},"asyncio"))),".")))}p.isMDXComponent=!0}}]);