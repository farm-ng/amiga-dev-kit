"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3658],{914:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));a(1839);const l={sidebar_label:"client",title:"farm_ng.oak.client"},s=void 0,i={unversionedId:"reference/brain/farm_ng/oak/client",id:"reference/brain/farm_ng/oak/client",title:"farm_ng.oak.client",description:"OakCameraClientConfig Objects",source:"@site/docs/reference/brain/farm_ng/oak/client.md",sourceDirName:"reference/brain/farm_ng/oak",slug:"/reference/brain/farm_ng/oak/client",permalink:"/docs/reference/brain/farm_ng/oak/client",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/brain/farm_ng/oak/client.md",tags:[],version:"current",frontMatter:{sidebar_label:"client",title:"farm_ng.oak.client"},sidebar:"api",previous:{title:"Install",permalink:"/docs/brain/brain-install"},next:{title:"oak_pb2_grpc",permalink:"/docs/reference/brain/farm_ng/oak/oak_pb2_grpc"}},c={},m=[{value:"OakCameraClientConfig Objects",id:"oakcameraclientconfig-objects",level:2},{value:"OakCameraServiceState Objects",id:"oakcameraservicestate-objects",level:2},{value:"value",id:"value",level:4},{value:"name",id:"name",level:4},{value:"OakCameraClient Objects",id:"oakcameraclient-objects",level:2},{value:"server_address",id:"server_address",level:4},{value:"get_state",id:"get_state",level:4},{value:"start_service",id:"start_service",level:4},{value:"pause_service",id:"pause_service",level:4},{value:"stream_frames",id:"stream_frames",level:4}],p={toc:m};function o(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"oakcameraclientconfig-objects"},"OakCameraClientConfig Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass OakCameraClientConfig()\n")),(0,r.kt)("p",null,"Camera client configuration."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"port")," ",(0,r.kt)("em",{parentName:"li"},"int")," - the port to connect to the server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address")," ",(0,r.kt)("em",{parentName:"li"},"str")," - the address to connect to the server.")),(0,r.kt)("h2",{id:"oakcameraservicestate-objects"},"OakCameraServiceState Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class OakCameraServiceState()\n")),(0,r.kt)("p",null,"Camera service state."),(0,r.kt)("p",null,"Possible state values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"UNKNOWN: undefined state."),(0,r.kt)("li",{parentName:"ul"},"RUNNING: the service is up AND streaming."),(0,r.kt)("li",{parentName:"ul"},"IDLE: the service is up AND NOT streaming."),(0,r.kt)("li",{parentName:"ul"},"UNAVAILABLE: the service is not available.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proto")," ",(0,r.kt)("em",{parentName:"li"},"oak_pb2.OakServiceState")," - protobuf message containing the camera state.")),(0,r.kt)("h4",{id:"value"},"value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef value() -> int\n")),(0,r.kt)("p",null,"Returns the state enum value."),(0,r.kt)("h4",{id:"name"},"name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name() -> str\n")),(0,r.kt)("p",null,"Return the state name."),(0,r.kt)("h2",{id:"oakcameraclient-objects"},"OakCameraClient Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class OakCameraClient()\n")),(0,r.kt)("p",null,"Oak-D camera client."),(0,r.kt)("p",null,"Client class to connect with the Amiga brain camera services.\nInternally implements an ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncio")," gRPC channel."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config")," ",(0,r.kt)("em",{parentName:"li"},"OakCameraClientConfig")," - the camera configuration data structure.")),(0,r.kt)("h4",{id:"server_address"},"server","_","address"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef server_address() -> str\n")),(0,r.kt)("p",null,"Returns the composed address and port."),(0,r.kt)("h4",{id:"get_state"},"get","_","state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"async def get_state() -> OakCameraServiceState\n")),(0,r.kt)("p",null,"Async call to retrieve the state of the connected service."),(0,r.kt)("h4",{id:"start_service"},"start","_","service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"async def start_service() -> None\n")),(0,r.kt)("p",null,"Start the camera streaming."),(0,r.kt)("p",null,"The service state will go from ",(0,r.kt)("inlineCode",{parentName:"p"},"IDLE")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"RUNNING"),"."),(0,r.kt)("h4",{id:"pause_service"},"pause","_","service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"async def pause_service() -> None\n")),(0,r.kt)("p",null,"Pauses the camera streaming."),(0,r.kt)("p",null,"The service state will go from ",(0,r.kt)("inlineCode",{parentName:"p"},"RUNNING")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"IDLE"),"."),(0,r.kt)("h4",{id:"stream_frames"},"stream","_","frames"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def stream_frames(every_n: int)\n")),(0,r.kt)("p",null,"Return the async streaming object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"every_n")," - the streaming frequency. In practice, drops ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," frames.")))}o.isMDXComponent=!0}}]);