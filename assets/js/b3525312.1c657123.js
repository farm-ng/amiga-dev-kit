"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),s=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,f=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return r?a.createElement(f,c(c({ref:t},p),{},{components:r})):a.createElement(f,c({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,c=new Array(i);c[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<i;s++)c[s]=r[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6417:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_label:"adk",title:"farm_ng.adk"},c=void 0,l={unversionedId:"reference/circuitpy/farm_ng/adk",id:"reference/circuitpy/farm_ng/adk",title:"farm_ng.adk",description:"BoardType Objects",source:"@site/docs/reference/circuitpy/farm_ng/adk.md",sourceDirName:"reference/circuitpy/farm_ng",slug:"/reference/circuitpy/farm_ng/adk",permalink:"/amiga-dev-kit/docs/reference/circuitpy/farm_ng/adk",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/circuitpy/farm_ng/adk.md",tags:[],version:"current",frontMatter:{sidebar_label:"adk",title:"farm_ng.adk"},sidebar:"docs",previous:{title:"FPV Example",permalink:"/amiga-dev-kit/docs/examples/FPV/"},next:{title:"oak_pb2_grpc",permalink:"/amiga-dev-kit/docs/reference/brain/farm_ng/oak/oak_pb2_grpc"}},o={},s=[{value:"BoardType Objects",id:"boardtype-objects",level:2},{value:"get_board_type",id:"get_board_type",level:4},{value:"ticks_add",id:"ticks_add",level:4},{value:"ticks_diff",id:"ticks_diff",level:4},{value:"ticks_less",id:"ticks_less",level:4},{value:"Axis Objects",id:"axis-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"map",id:"map",level:4}],p={toc:s};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"boardtype-objects"},"BoardType Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class BoardType()\n")),(0,n.kt)("p",null,"Enum representing the Amiga Board type."),(0,n.kt)("h4",{id:"get_board_type"},"get","_","board","_","type"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_board_type() -> BoardType\n")),(0,n.kt)("p",null,"Return the Board type based on the operating system."),(0,n.kt)("h4",{id:"ticks_add"},"ticks","_","add"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def ticks_add(ticks, delta)\n")),(0,n.kt)("p",null,"Add a delta to a base number of ticks, performing wraparound at 2**29ms."),(0,n.kt)("h4",{id:"ticks_diff"},"ticks","_","diff"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def ticks_diff(ticks1, ticks2)\n")),(0,n.kt)("p",null,"Compute the signed difference between two ticks values, assuming that they are within 2**28 ticks"),(0,n.kt)("h4",{id:"ticks_less"},"ticks","_","less"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def ticks_less(ticks1, ticks2)\n")),(0,n.kt)("p",null,"Return true iff ticks1 is less than ticks2, assuming that they are within 2**28 ticks"),(0,n.kt)("h2",{id:"axis-objects"},"Axis Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Axis()\n")),(0,n.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(min_value, deadzone_m1, deadzone_p1, max_value)\n")),(0,n.kt)("p",null,"min, -deadzone, +deadzone, max"),(0,n.kt)("h4",{id:"map"},"map"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def map(v)\n")),(0,n.kt)("p",null,"returns -1 .. +1"))}d.isMDXComponent=!0}}]);