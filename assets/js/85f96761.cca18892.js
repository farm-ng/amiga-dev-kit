"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6150],{913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));n(1839);const s={sidebar_label:"version",title:"utils.version"},a=void 0,l={unversionedId:"reference/circuitpy/utils/version",id:"reference/circuitpy/utils/version",title:"utils.version",description:"Update values following semantic versioning convention.",source:"@site/docs/reference/circuitpy/utils/version.md",sourceDirName:"reference/circuitpy/utils",slug:"/reference/circuitpy/utils/version",permalink:"/docs/reference/circuitpy/utils/version",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/circuitpy/utils/version.md",tags:[],version:"current",frontMatter:{sidebar_label:"version",title:"utils.version"},sidebar:"api",previous:{title:"packet",permalink:"/docs/reference/circuitpy/utils/packet"},next:{title:"Install",permalink:"/docs/brain/brain-install"}},o={},p=[{value:"version_tuple",id:"version_tuple",level:4},{value:"version_string",id:"version_string",level:4},{value:"BoardType Objects",id:"boardtype-objects",level:2},{value:"get_board_type",id:"get_board_type",level:4}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Update values following semantic versioning convention."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"MAJOR: Major version"),(0,r.kt)("li",{parentName:"ul"},"MINOR: Minor version"),(0,r.kt)("li",{parentName:"ul"},"PATCH: Patch version"),(0,r.kt)("li",{parentName:"ul"},"DEV: Boolean indicating it is a development release")),(0,r.kt)("h4",{id:"version_tuple"},"version","_","tuple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def version_tuple()\n")),(0,r.kt)("p",null,"Returns tuple containing firmware version."),(0,r.kt)("h4",{id:"version_string"},"version","_","string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def version_string()\n")),(0,r.kt)("p",null,"Returns string containing firmware version."),(0,r.kt)("h2",{id:"boardtype-objects"},"BoardType Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class BoardType()\n")),(0,r.kt)("p",null,"Enum representing the Amiga Board type (where Amiga application layer is running)."),(0,r.kt)("h4",{id:"get_board_type"},"get","_","board","_","type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_board_type()\n")),(0,r.kt)("p",null,"Return the Board type based on the operating system."))}c.isMDXComponent=!0}}]);