"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[7470],{8537:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var a=i(5893),s=i(1151);const t={id:"camera-client",title:"Camera Client"},r=void 0,c={id:"examples/camera_client/camera-client",title:"Camera Client",description:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:",source:"@site/docs/examples/camera_client/README.md",sourceDirName:"examples/camera_client",slug:"/examples/camera_client/",permalink:"/docs/examples/camera_client/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/camera_client/README.md",tags:[],version:"current",frontMatter:{id:"camera-client",title:"Camera Client"},sidebar:"examples",previous:{title:"File Reader Headers",permalink:"/docs/examples/file_reader_headers/"},next:{title:"Camera Settings",permalink:"/docs/examples/camera_settings/"}},o={},l=[{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Install the example&#39;s dependencies",id:"2-install-the-examples-dependencies",level:3},{value:"3. Execute the Python script",id:"3-execute-the-python-script",level:3},{value:"4. Customize the run",id:"4-customize-the-run",level:3},{value:"5. Code overview",id:"5-code-overview",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.admonition,{title:"Basic Knowledge Requirements",type:"info",children:[(0,a.jsx)(n.p,{children:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:"}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Python Programming"}),": It's important to have a good grasp of Python, especially with concepts\nlike ",(0,a.jsx)(n.code,{children:"functions"}),", ",(0,a.jsx)(n.code,{children:"loops"}),", and ",(0,a.jsx)(n.code,{children:"classes"}),", since the example utilizes these fundamentals."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Asynchronous Programming with asyncio"}),": Familiarity with Python's asyncio for writing concurrent\ncode using the ",(0,a.jsx)(n.code,{children:"async/await"})," syntax."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Image Processing with OpenCV"}),": Basic knowledge of the OpenCV library for handling and manipulating\nimage data, including functions like ",(0,a.jsx)(n.code,{children:"imdecode"}),", ",(0,a.jsx)(n.code,{children:"applyColorMap"}),", and ",(0,a.jsx)(n.code,{children:"imshow"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/concepts/oak_service/",children:"farm-ng Oak Service Overview"})}),":\nThis overview provides a base understanding of the gRPC service the client you create will connect to."]}),"\n"]})]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/py/examples/camera_client/main.py",children:(0,a.jsx)(n.strong,{children:"Camera Client"})}),"\nexample operates as a standalone Python script,\nin which an ",(0,a.jsx)(n.code,{children:"EventClient"})," to an Oak camera service running on an Amiga brain is created.\nThe selected stream is displayed in a popup window."]}),"\n",(0,a.jsxs)(n.p,{children:["To successfully run this example, you must use your local PC, as the example won't\nwork if executed directly from a brain (because of the popup window).\nEnsure that a ",(0,a.jsx)(n.a,{href:"/docs/brain/",children:(0,a.jsx)(n.strong,{children:"farm-ng brain"})})," running Oak cameras is active.\nYour local PC should be either connected to the same local network as the brain\nor linked to it through tailscale."]}),"\n",(0,a.jsxs)(n.h3,{id:"1-install-the-farm-ng-brain-adk-package",children:["1. Install the ",(0,a.jsx)(n.a,{href:"/docs/brain/brain-install",children:"farm-ng Brain ADK package"})]}),"\n",(0,a.jsx)(n.h3,{id:"2-install-the-examples-dependencies",children:"2. Install the example's dependencies"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment."})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/camera_client\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip3 install -r requirements.txt\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-execute-the-python-script",children:"3. Execute the Python script"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python3 main.py --service-config service_config.json\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["By default, the camera ",(0,a.jsx)(n.code,{children:"host"})," is assumed to be ",(0,a.jsx)(n.code,{children:"localhost"})," (",(0,a.jsx)(n.code,{children:"service_config.json"}),").\nYou should replace ",(0,a.jsx)(n.code,{children:"localhost"})," with your brain's IP address (e.g.,100.67.32.5) or your amiga's\nname (e.g., ",(0,a.jsx)(n.code,{children:"element-vegetable"})," - only supported if connected via tailscale)."]})}),"\n",(0,a.jsx)(n.h3,{id:"4-customize-the-run",children:"4. Customize the run"}),"\n",(0,a.jsx)(n.p,{children:"Let's have some fun and stream the camera to your laptop over the\nWifi."}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You need to discover the WiFi address of your Amiga Brain using\nthe ",(0,a.jsx)(n.code,{children:"WifiClient"})," (coming soon)"]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python3 main.py --help\n\n# usage: amiga-camera-stream [-h] --service-config SERVICE_CONFIG\n#\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --service-config SERVICE_CONFIG\n#                         The camera config.\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To customize the run, you need to update the ",(0,a.jsx)(n.code,{children:"service_config.json"}),"\nby modifying the ",(0,a.jsx)(n.code,{children:"host"})," and ",(0,a.jsx)(n.code,{children:"port"})," fields.\nYou can also stream the stereo left or right images or the camera's\ndisparity by changing the ",(0,a.jsx)(n.code,{children:"path"})," field (e.g., /left)."]}),"\n",(0,a.jsx)(n.h3,{id:"5-code-overview",children:"5. Code overview"}),"\n",(0,a.jsxs)(n.p,{children:["In this example we use the ",(0,a.jsx)(n.code,{children:"EventClient"})," with the ",(0,a.jsx)(n.code,{children:"subscribe"})," method to receive the camera stream."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'async def main(service_config_path: Path) -> None:\n    """Run the camera service client.\n\n    Args:\n        service_config_path (Path): The path to the camera service config.\n    """\n    # create a client to the camera service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    # instantiate the image decoder\n    image_decoder = ImageDecoder()\n\n    async for event, message in EventClient(config).subscribe(config.subscriptions[0], decode=True):\n        print(f"Timestamps: {event.timestamps[-2]}")\n        print(f"Meta: {message.meta}")\n        print("###################\\n")\n\n        # cast image data bytes to numpy and decode\n        image = np.from_dlpack(image_decoder.decode(message.image_data))\n\n        # visualize the image\n        cv2.namedWindow("image", cv2.WINDOW_NORMAL)\n        cv2.imshow("image", image)\n        cv2.waitKey(1)\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-camera-stream")\n    parser.add_argument("--service-config", type=Path, required=True, help="The camera config.")\n    args = parser.parse_args()\n\n    asyncio.run(main(args.service_config))\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["We highly recommend to have some basic knowledge about\n",(0,a.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio.html",children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"asyncio"})})}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>r});var a=i(7294);const s={},t=a.createContext(s);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);