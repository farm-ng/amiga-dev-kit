"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8153],{75:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));n(1839);const s={id:"tracks-and-waypoints",title:"Tracks & Waypoints"},r=void 0,i={unversionedId:"concepts/controller_101/tracks-and-waypoints",id:"concepts/controller_101/tracks-and-waypoints",title:"Tracks & Waypoints",description:"Understanding Transforms & Poses",source:"@site/docs/concepts/controller_101/README.md",sourceDirName:"concepts/controller_101",slug:"/concepts/controller_101/",permalink:"/docs/concepts/controller_101/",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/concepts/controller_101/README.md",tags:[],version:"current",frontMatter:{id:"tracks-and-waypoints",title:"Tracks & Waypoints"},sidebar:"Concepts",previous:{title:"Transforms & Poses",permalink:"/docs/concepts/transforms_and_poses/"},next:{title:"CANBUS",permalink:"/docs/concepts/canbus_service/"}},p={},l=[{value:"Understanding Transforms &amp; Poses",id:"understanding-transforms--poses",level:2},{value:"Creating and Propagating Poses for the Controller",id:"creating-and-propagating-poses-for-the-controller",level:2},{value:"Example",id:"example",level:3},{value:"Code Breakdown",id:"code-breakdown",level:3},{value:"Next Steps",id:"next-steps",level:2}],m={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"understanding-transforms--poses"},"Understanding Transforms & Poses"),(0,a.kt)("p",null,"Before we can send our robot out to drive a ",(0,a.kt)("strong",{parentName:"p"},"track")," (or ",(0,a.kt)("strong",{parentName:"p"},"path"),"),\nwe need to understand where our robot is and where we want to send it.\nFor that purposes, please refer to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/concepts/transforms_and_poses"},"Concepts - Transforms & Poses")),"\nbefore continuing on with this overview."),(0,a.kt)("h2",{id:"creating-and-propagating-poses-for-the-controller"},"Creating and Propagating Poses for the Controller"),(0,a.kt)("p",null,"When you want the Amiga to perform a specific movement, you need to provide it with a series\nof poses that describe that movement.\nWe call these poses ",(0,a.kt)("strong",{parentName:"p"},"waypoints")," and the series of them a *",(0,a.kt)("em",{parentName:"p"},"track"),".*"),(0,a.kt)("p",null,"For a better understanding of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Pose")," structure, please refer to our\n",(0,a.kt)("a",{parentName:"p",href:"/docs/concepts/transforms_and_poses/#the-farm-ng-pose-proto"},(0,a.kt)("inlineCode",{parentName:"a"},"Pose")," proto overview"),"."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"There are several ways of creating poses and commanding your ",(0,a.kt)("inlineCode",{parentName:"p"},"Controller")," to follow them.\nLet's check how to use the concepts learned here to create poses that represent a ",(0,a.kt)("inlineCode",{parentName:"p"},"pi turn"),"\n(also know as a U turn) using the ",(0,a.kt)("inlineCode",{parentName:"p"},"pose")," structure:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE"),": Please note that in this example we propagate the proposes from the robot frame."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def create_pi_turn_segment(\n    previous_pose: Pose3F64, next_frame_b: str, radius: float, spacing: float = 0.1\n) -> list[Pose3F64]:\n    """Compute a pi turn segment.\n\n    Args:\n        previous_pose (Pose3F64): The previous pose.\n        next_frame_b (str): The name of the child frame of the next pose.\n        radius (float): The radius of the pi turn.\n        spacing (float): The spacing between waypoints, in meters.\n\n    Returns:\n        list[Pose3F64]: The poses of the pi turn segment.\n    """\n    # Calculate the total arc length of the half-circle\n    arc_length = pi * radius\n\n    # Determine the number of segments, ensuring at least one segment\n    num_segments = max(int(arc_length / spacing), 1)\n\n    # Angle increment per segment\n    delta_angle = pi / num_segments\n\n    # Distance increment per segment\n    delta_distance = arc_length / num_segments\n\n    # Create a container to store the track segment waypoints\n    segment_poses: list[Pose3F64] = [previous_pose]\n\n    for i in range(1, num_segments + 1):\n\n        # Calculate the pose for the current segment\n        turn_segment: Pose3F64 = Pose3F64(\n            a_from_b=Isometry3F64([delta_distance, 0, 0], Rotation3F64.Rz(delta_angle)),\n            frame_a=segment_poses[-1].frame_b,\n            frame_b=f"{next_frame_b}_{i-1}",\n        )\n        segment_poses.append(segment_poses[-1] * turn_segment)\n\n    # Rename the last pose to the desired name\n    segment_poses[-1].frame_b = next_frame_b\n    return segment_poses\n')),(0,a.kt)("h3",{id:"code-breakdown"},"Code Breakdown"),(0,a.kt)("p",null,"Since we're in the robot frame, we always command it to drive forward, for this reason the ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"z"),"\ncomponents of our ",(0,a.kt)("inlineCode",{parentName:"p"},"Isometry3F64")," are always zero."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The robot moves forward by delta_distance (linear movement along the x-axis)."),(0,a.kt)("li",{parentName:"ul"},"It rotates by delta_angle about the z-axis."),(0,a.kt)("li",{parentName:"ul"},"This transformation is then used to calculate the new pose of the robot for that segment.")),(0,a.kt)("p",null,"In essence, by using Isometry3F64, you're able to succinctly describe both the linear and\nangular movements of the robot for each segment of its pi turn."),(0,a.kt)("h2",{id:"next-steps"},"Next Steps"),(0,a.kt)("p",null,"Make sure to check the ",(0,a.kt)("a",{parentName:"p",href:"https://amiga.farm-ng.com/docs/concepts/"},"Concepts")," page\nto know more about all the services available in your Amiga and how they interact with each other."),(0,a.kt)("p",null,"Make sure to also check our ",(0,a.kt)("a",{parentName:"p",href:"https://amiga.farm-ng.com/docs/examples/examples-index"},"Brain Controller Examples"),"\nto test the ",(0,a.kt)("inlineCode",{parentName:"p"},"Controller")," in your Amiga."))}c.isMDXComponent=!0}}]);