"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2483],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(a),m=r,_=c["".concat(p,".").concat(m)]||c[m]||d[m]||l;return a?n.createElement(_,i(i({ref:t},u),{},{components:a})):n.createElement(_,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2064:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_label:"main_loop",title:"utils.main_loop"},i=void 0,o={unversionedId:"reference/circuitpy/utils/main_loop",id:"reference/circuitpy/utils/main_loop",title:"utils.main_loop",description:"get\\node\\id",source:"@site/docs/reference/circuitpy/utils/main_loop.md",sourceDirName:"reference/circuitpy/utils",slug:"/reference/circuitpy/utils/main_loop",permalink:"/docs/reference/circuitpy/utils/main_loop",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/circuitpy/utils/main_loop.md",tags:[],version:"current",frontMatter:{sidebar_label:"main_loop",title:"utils.main_loop"},sidebar:"api",previous:{title:"io",permalink:"/docs/reference/circuitpy/utils/io"},next:{title:"packet",permalink:"/docs/reference/circuitpy/utils/packet"}},p={},s=[{value:"get_node_id",id:"get_node_id",level:4},{value:"MainLoop Objects",id:"mainloop-objects",level:2},{value:"io_debug_str",id:"io_debug_str",level:4},{value:"can_debug_str",id:"can_debug_str",level:4},{value:"update_mem",id:"update_mem",level:4},{value:"init_app",id:"init_app",level:4},{value:"handle_supervisor_req",id:"handle_supervisor_req",level:4},{value:"handle_message",id:"handle_message",level:4},{value:"can_dummy",id:"can_dummy",level:4},{value:"poll_can",id:"poll_can",level:4},{value:"update_can_stats",id:"update_can_stats",level:4},{value:"update_display",id:"update_display",level:4},{value:"draw_debug",id:"draw_debug",level:4},{value:"iter",id:"iter",level:4},{value:"loop",id:"loop",level:4}],u={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"get_node_id"},"get","_","node","_","id"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_node_id()\n")),(0,r.kt)("p",null,"Returns the value from the node_id.txt file in root of CIRCUITPY drive, if exists Else returns an arbitrary\ndefault node id."),(0,r.kt)("h2",{id:"mainloop-objects"},"MainLoop Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MainLoop()\n")),(0,r.kt)("p",null,"Main driver for all farm-ng apps run on microcontrollers."),(0,r.kt)("h4",{id:"io_debug_str"},"io","_","debug","_","str"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def io_debug_str()\n")),(0,r.kt)("p",null,"Returns debug string for serial console."),(0,r.kt)("h4",{id:"can_debug_str"},"can","_","debug","_","str"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def can_debug_str()\n")),(0,r.kt)("p",null,"Returns string with details on CAN bus status."),(0,r.kt)("h4",{id:"update_mem"},"update","_","mem"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def update_mem()\n")),(0,r.kt)("p",null,"Check RAM stats on mcu."),(0,r.kt)("h4",{id:"init_app"},"init","_","app"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def init_app()\n")),(0,r.kt)("p",null,"Initialize the app loaded on the mcu."),(0,r.kt)("h4",{id:"handle_supervisor_req"},"handle","_","supervisor","_","req"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def handle_supervisor_req(message)\n")),(0,r.kt)("p",null,"Handle supervisor request CAN message."),(0,r.kt)("h4",{id:"handle_message"},"handle","_","message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def handle_message(message)\n")),(0,r.kt)("p",null,"Process each received CAN message."),(0,r.kt)("h4",{id:"can_dummy"},"can","_","dummy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def can_dummy(message)\n")),(0,r.kt)("p",null,"Dummy function that is called when message does not meet filter."),(0,r.kt)("h4",{id:"poll_can"},"poll","_","can"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def poll_can()\n")),(0,r.kt)("p",null,"Checks for can messages to parse."),(0,r.kt)("h4",{id:"update_can_stats"},"update","_","can","_","stats"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def update_can_stats()\n")),(0,r.kt)("p",null,"Query CAN bus status."),(0,r.kt)("h4",{id:"update_display"},"update","_","display"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def update_display(display: Display)\n")),(0,r.kt)("p",null,"Called by ",(0,r.kt)("strong",{parentName:"p"},"init")," delta tracker object."),(0,r.kt)("h4",{id:"draw_debug"},"draw","_","debug"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def draw_debug(display: Display)\n")),(0,r.kt)("p",null,"Show debug stats on the dashboard display."),(0,r.kt)("h4",{id:"iter"},"iter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def iter()\n")),(0,r.kt)("p",null,"Method called every loop of the main while loop driving the app on the microcontroller."),(0,r.kt)("h4",{id:"loop"},"loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def loop()\n")),(0,r.kt)("p",null,"Initializes the main while loop, with an exception handler for dashboard that displays exceptions on the\nscreen."))}d.isMDXComponent=!0}}]);