"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4306],{1628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));n(1839);const s={id:"gps-client",title:"GPS Client"},o="GPS Client Example",l={unversionedId:"examples/gps_client/gps-client",id:"examples/gps_client/gps-client",title:"GPS Client",description:"The GPS Client example",source:"@site/docs/examples/gps_client/README.md",sourceDirName:"examples/gps_client",slug:"/examples/gps_client/",permalink:"/docs/examples/gps_client/",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/gps_client/README.md",tags:[],version:"current",frontMatter:{id:"gps-client",title:"GPS Client"},sidebar:"examples",previous:{title:"Follow a track",permalink:"/docs/examples/controller_track/"},next:{title:"Monitor App",permalink:"/docs/examples/monitor_app/"}},r={},p=[{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:2},{value:"2. Install the example&#39;s dependencies",id:"2-install-the-examples-dependencies",level:2},{value:"Setup",id:"setup",level:3},{value:"Install",id:"install",level:3},{value:"3. Execute the Python script",id:"3-execute-the-python-script",level:2},{value:"4. Customize the run",id:"4-customize-the-run",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"gps-client-example"},"GPS Client Example"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/gps_client/main.py"},(0,i.kt)("strong",{parentName:"a"},"GPS Client example")),"\noperates as a standalone Python script,\nin which an ",(0,i.kt)("inlineCode",{parentName:"p"},"EventClient")," to the farm-ng GPS service running on an Amiga brain is created."),(0,i.kt)("p",null,"The script processes two types of GPS messages: ",(0,i.kt)("inlineCode",{parentName:"p"},"relposned")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pvt"),".\nThe user specifies which GPS message topics to subscribe to in the service configuration.\nThe script subscribes to the corresponding data streams and prints the output to the console."),(0,i.kt)("p",null,"You can either run this example directly on a brain by ",(0,i.kt)("inlineCode",{parentName:"p"},"ssh"),"'ing in, or use your local PC.\nIf using your local PC, it should be either connected to the same local network as the brain\nor linked to it through tailscale."),(0,i.kt)("p",null,"Ensure that a ",(0,i.kt)("a",{parentName:"p",href:"/docs/brain/"},(0,i.kt)("strong",{parentName:"a"},"farm-ng brain")),", with a GPS receiver, is actively running the GPS service.\nFor ",(0,i.kt)("inlineCode",{parentName:"p"},"relposned")," messages, a connection to an RTK base station is also required."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There are two types of GPS messages: ",(0,i.kt)("strong",{parentName:"p"},"PVT")," and ",(0,i.kt)("strong",{parentName:"p"},"RELPOSNED"),"."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"PVT")," (Position, Velocity, and Time) messages provide the all-in-one solution: position, velocity,\nand time.\nIt contains details like longitude, latitude, altitude, speed, and UTC time."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"RELPOSNED"),' (Relative Positioning) messages provide relative position\ninformation in a North, East, Down (N-E-D) frame. It\'s mainly used for applications requiring relative\npositioning between two receivers, often as a part of Real Time Kinematics (RTK) solutions.\nIt shows the difference in position between a "moving" receiver and a "fixed" reference receiver.')),(0,i.kt)("h2",{id:"1-install-the-farm-ng-brain-adk-package"},"1. Install the ",(0,i.kt)("a",{parentName:"h2",href:"/docs/brain/brain-install"},"farm-ng Brain ADK package")),(0,i.kt)("h2",{id:"2-install-the-examples-dependencies"},"2. Install the example's dependencies"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment.")),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("admonition",{title:"Recommended",type:"important"},(0,i.kt)("p",{parentName:"admonition"},"Create a virtual environment")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv venv\nsource venv/bin/activate\n")),(0,i.kt)("h3",{id:"install"},"Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd py/examples/gps_client\npip install -r requirements.txt\n")),(0,i.kt)("h2",{id:"3-execute-the-python-script"},"3. Execute the Python script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python main.py --service-config service_config.json\n")),(0,i.kt)("h3",{id:"4-customize-the-run"},"4. Customize the run"),(0,i.kt)("p",null,"You can also specify a gps interface (",(0,i.kt)("inlineCode",{parentName:"p"},"/relposned")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"/pvt"),") to read by\nmodifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"uri.path")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"service_config.json")," file.\nThe default value (",(0,i.kt)("strong",{parentName:"p"},"'*'"),") will stream all messages published by the service."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "gps",\n    "port": 3001,\n    "host": "localhost",\n    "log_level": "INFO",\n    "subscriptions": [\n        {\n            "uri": {\n                "path": "/relposned",\n                "query": "service_name=gps"\n            },\n            "every_n": 1\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"If everything worked correctly you should now see a large stream\nof text come up in your terminal!"),(0,i.kt)("p",null,"The output should look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Message stamp: 913.417056353\nGPS time: 1696009971.6\nLatitude: 36.9293043\nLongitude: -121.7903499\nAltitude: 35.574\nGround speed: 0.78\nSpeed accuracy: 0.06199999898672104\nHorizontal accuracy: 0.014999999664723873\nVertical accuracy: 0.017000000923871994\nP DOP: 0.0179\n--------------------------------------------------\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Congrats you are done!")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We highly recommend to have some basic knowledge about\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},(0,i.kt)("strong",{parentName:"a"},(0,i.kt)("inlineCode",{parentName:"strong"},"asyncio"))),".")))}c.isMDXComponent=!0}}]);