"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[4046],{8575:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=o(74848),i=o(28453);const s={id:"hello-world",title:"Hello Main Loop Example"},r="Hello Main Loop Example",a={id:"examples/hello_main_loop/hello-world",title:"Hello Main Loop Example",description:"Link to hellomainloop/code.py",source:"@site/docs/examples/hello_main_loop/README.md",sourceDirName:"examples/hello_main_loop",slug:"/examples/hello_main_loop/",permalink:"/docs/examples/hello_main_loop/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/hello_main_loop/README.md",tags:[],version:"current",frontMatter:{id:"hello-world",title:"Hello Main Loop Example"},sidebar:"examples",previous:{title:"Examples Index",permalink:"/docs/examples/examples-index"},next:{title:"Cansniffer Example",permalink:"/docs/examples/cansniffer/"}},d={},l=[{value:"Link to <code>hello_main_loop/code.py</code>",id:"link-to-hello_main_loopcodepy",level:2},{value:"Parts required",id:"parts-required",level:2},{value:"Code Breakdown",id:"code-breakdown",level:2},{value:"Imports from <code>lib/</code>",id:"imports-from-lib",level:3},{value:"<code>MainLoop</code>",id:"mainloop",level:4},{value:"<code>TickRepeater</code>",id:"tickrepeater",level:4},{value:"AmigaRpdo1",id:"amigarpdo1",level:4},{value:"AmigaTpdo1",id:"amigatpdo1",level:4},{value:"AmigaControlState",id:"amigacontrolstate",level:4},{value:"CanOpenObject / DASHBOARD_NODE_ID",id:"canopenobject--dashboard_node_id",level:4},{value:"code.py",id:"codepy",level:3},{value:"HelloMainLoopApp",id:"hellomainloopapp",level:4},{value:"Instructions",id:"instructions",level:2},{value:"1. Connection",id:"1-connection",level:3},{value:"2. Load the code",id:"2-load-the-code",level:3},{value:"3. Open the Serial Console",id:"3-open-the-serial-console",level:3},{value:"4. Enable AUTO",id:"4-enable-auto",level:3},{value:"On the dashboard",id:"on-the-dashboard",level:4},{value:"In the serial console",id:"in-the-serial-console",level:4},{value:"5. Drive the robot",id:"5-drive-the-robot",level:3},{value:"6. Release AUTO",id:"6-release-auto",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"hello-main-loop-example",children:"Hello Main Loop Example"})}),"\n",(0,t.jsx)(n.h2,{id:"link-to-hello_main_loopcodepy",children:(0,t.jsxs)(n.a,{href:"https://github.com/farm-ng/amiga-dev-kit/blob/main/circuitpy/examples/hello_main_loop/code.py",children:["Link to ",(0,t.jsx)(n.code,{children:"hello_main_loop/code.py"})]})}),"\n",(0,t.jsxs)(n.p,{children:["This introductory example covers getting set up, interacting with\nthe Amiga, and\nusing auto-control mode to drive your Amiga from a computer\nusing the ",(0,t.jsx)(n.a,{href:"https://farm-ng.com/products/microcontroller-kit",children:(0,t.jsx)(n.strong,{children:"farm-ng microcontroller kit"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This example enables driving the Amiga by entering simple fwd /\nrev / left / right keyboard commands the serial port, which the\napp sends over the CAN bus."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Please note that USB serial connections can sometimes be unstable.\nThis example is intended to demonstrate the concept of controlling your Amiga\nwith the microcontroller kit and should not be considered a robust solution for critical applications."})}),"\n",(0,t.jsx)(n.h2,{id:"parts-required",children:"Parts required"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://farm-ng.com/products/microcontroller-kit",children:(0,t.jsx)(n.strong,{children:"farm-ng microcontroller kit"})})," (w/ USB-C cable)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"code-breakdown",children:"Code Breakdown"}),"\n",(0,t.jsxs)(n.h3,{id:"imports-from-lib",children:["Imports from ",(0,t.jsx)(n.code,{children:"lib/"})]}),"\n",(0,t.jsx)(n.h4,{id:"mainloop",children:(0,t.jsx)(n.code,{children:"MainLoop"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MainLoop"})," class is used throughout the application layer of\nthe farm-ng firmware.\n",(0,t.jsx)(n.code,{children:"MainLoop"})," contains generic functionality we use on our pendant,\ndashboard, and auxiliary components for constant looping,\nreceiving of CAN messages, sending of regular status updates\ncalled ",(0,t.jsx)(n.code,{children:"Heartbeats"}),", and more.\nThe ",(0,t.jsx)(n.code,{children:"MainLoop"})," takes an ",(0,t.jsx)(n.code,{children:"AppClass"})," in the constructor, and the\n",(0,t.jsx)(n.code,{children:"AppClass"})," is expected to contain a method called ",(0,t.jsx)(n.code,{children:"iter"})," that is\ncalled every in every iteration (also called ",(0,t.jsx)(n.code,{children:"iter"}),") of the\n",(0,t.jsx)(n.code,{children:"MainLoop"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"_register_message_handlers()"})," method is an important feature\nto note.\nThis method adds parsing directly into the MainLoop so the App\nonly receives the desired CAN messages.\nBecause messages sent on the CAN bus are seen by all other\ncomponents\nit is important to efficiently filter out irrelevant messages\non the resource constrained microcontrollers."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Take it further:",type:"info",children:[(0,t.jsx)(n.p,{children:"Try to add an additional message parser for one of the other\nmessages on the CAN bus.\nFor instance, if you have a pendant connected to your CAN bus you\ncould add something like:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Python",children:"from farm_ng.utils.packet import  PENDANT_NODE_ID, PendantState\n\ndef _register_message_handlers(self):\n   self.main_loop.command_handlers[CanOpenObject.TPDO1 |\n   DASHBOARD_NODE_ID] = self._handle_amiga_tpdo1\n   self.main_loop.command_handlers[CanOpenObject.TPDO1 | PENDANT_NODE_ID] = self._handle_pendant_state\n\ndef _handle_pendant_state(self, message):\n   pendant_state = PendantState.from_can_data(message.data)\n   print(pendant_state)\n"})}),(0,t.jsxs)(n.p,{children:["All messages on the bus can be found by using the\n",(0,t.jsx)(n.a,{href:"./../cansniffer/",children:(0,t.jsx)(n.strong,{children:"cansniffer example app"})}),".\nYou can compare the detected CAN ID's to those in\n",(0,t.jsx)(n.code,{children:"CanOpenObject"}),". But keep in mind, node id is added\nto the function code for the full CAN Id, as you'll see below in\n",(0,t.jsx)(n.a,{href:"#canopenobject--dashboard_node_id",children:(0,t.jsx)(n.strong,{children:"CanOpenObject / DASHBOARD_NODE_ID"})}),"."]})]}),"\n",(0,t.jsx)(n.h4,{id:"tickrepeater",children:(0,t.jsx)(n.code,{children:"TickRepeater"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TickRepeater"}),' class is a useful utility that we recommend\ntaking advantage of throughout your custom implementations.\nWe use "repeaters" to limit the frequency of certain actions, by\nonly performing the action once the ',(0,t.jsx)(n.code,{children:"period"})," of the repeater has\npast, when compared to the last time the action was performed.\nThe ",(0,t.jsx)(n.code,{children:"check()"})," method returns ",(0,t.jsx)(n.code,{children:"False"})," until the checkpoint has\npast, and ",(0,t.jsx)(n.code,{children:"True"})," once the checkpoint is past.\nWhen ",(0,t.jsx)(n.code,{children:"True"})," is returned, the repeater is updated to the next\ncheckpoint, so you really only need the ",(0,t.jsx)(n.code,{children:"check()"})," method in most\napplications."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TickRepeater"}),' is what we call a "catch-up" repeater, in\nwhich the the next checkpoint is the\n',(0,t.jsx)(n.code,{children:"ticks_period_ms"})," (period in ms) added to the last checkpoint\n(rather than the next checkpoint being the ",(0,t.jsx)(n.code,{children:"ticks_period_ms"}),"\nadded to the time of last execution).\nAs you can infer, there's no reason to use one of these catch-up\nrepeaters if the ",(0,t.jsx)(n.code,{children:"check()"})," will be called less frequently than\nthe ",(0,t.jsx)(n.code,{children:"ticks_period_ms"})," used in the constructor."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.code,{children:"ticks_ms"})}),(0,t.jsxs)(n.p,{children:["We use ",(0,t.jsx)(n.code,{children:"ticks_ms"}),"\nwhich wraps every ",(0,t.jsx)(n.code,{children:"2^29"})," ms (~6.2 days).\nOur logic handles a single wrap, but we do not detect two wraps\nas we use this in periods more on the ",(0,t.jsx)(n.code,{children:"100 ms"})," timescale.\nIf you are creating a long duration application,\njust make sure your period is less than 6 days and that the check\nis called at least that often."]}),(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://docs.circuitpython.org/en/latest/shared-bindings/supervisor/#supervisor.ticks_ms",children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"supervisor.ticks_ms()"})," docs"]})}),"\nfor more details about ",(0,t.jsx)(n.code,{children:"ticks_ms"}),"."]})]}),"\n",(0,t.jsx)(n.h4,{id:"amigarpdo1",children:"AmigaRpdo1"}),"\n",(0,t.jsxs)(n.p,{children:["Wrapper for CAN packet used for auto mode controls of the Amiga.\nProvide the",(0,t.jsx)(n.code,{children:"AmigaRpdo1"})," object with a requested\n",(0,t.jsx)(n.code,{children:"AmigaControlState"}),", speed, and angular rate.\nThen pack this into a ",(0,t.jsx)(n.a,{href:"https://docs.circuitpython.org/en/latest/shared-bindings/canio/index.html#canio.Message",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"canio.Message"})})}),"\nand send this message over the bus."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"request"})})," for a specific ",(0,t.jsx)(n.code,{children:"AmigaControlState"}),",\nangular rate, and linear velocity sent to the dashboard.\nThe dashboard, operating as the vehicle control unit (VCU), has\nbuilt-in logic to prevent unsafe speeds, accelerations, control\nstate transitions, etc."]})}),"\n",(0,t.jsx)(n.h4,{id:"amigatpdo1",children:"AmigaTpdo1"}),"\n",(0,t.jsxs)(n.p,{children:["Wrapper for CAN packet used for sending state of the Amiga,\nincluding ",(0,t.jsx)(n.code,{children:"AmigaControlState"}),".\nUnpack the message to see the current ",(0,t.jsx)(n.code,{children:"AmigaControlState"}),", speed,\nand angular rate of the robot."]}),"\n",(0,t.jsxs)(n.p,{children:["There is a convenient util function ",(0,t.jsx)(n.code,{children:"from_can_data"})," that unpacks\nthe message directly into an ",(0,t.jsx)(n.code,{children:"AmigaTpdo1"})," object."]}),"\n",(0,t.jsx)(n.h4,{id:"amigacontrolstate",children:"AmigaControlState"}),"\n",(0,t.jsx)(n.p,{children:"Control state of the Amiga."}),"\n",(0,t.jsx)(n.h4,{id:"canopenobject--dashboard_node_id",children:"CanOpenObject / DASHBOARD_NODE_ID"}),"\n",(0,t.jsxs)(n.p,{children:["We ",(0,t.jsx)(n.em,{children:"mostly"})," follow the CANopen standards.\nA recommended reading is the ",(0,t.jsx)(n.a,{href:"https://www.csselectronics.com/pages/canopen-tutorial-simple-intro",children:(0,t.jsx)(n.strong,{children:"CSS Electronics CANopen tutorial"})}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Some of the third-party, auxiliary components we have integrated\ninto the system do not allow for strict adherence to the CANopen\nstandards.\nFor our core system, we adhere closely to the standards."})}),"\n",(0,t.jsxs)(n.p,{children:["In this standard, messages are passed using function codes based\non their use.\nEach component has a node ID identifier used to identify either\nthe intended recipient or the source component of each message\nsent on the CAN bus.\nIn the current example, we send requested commands to the Amiga\non the ",(0,t.jsx)(n.code,{children:"RPDO1"})," channel, and receive responses streamed from the\nAmiga on the ",(0,t.jsx)(n.code,{children:"TPDO1"})," channel.\nThese are differentiated from pendant or motor controller RPDO/\nTPDO command sets by sending them with the dashboard node ID."]}),"\n",(0,t.jsx)(n.h3,{id:"codepy",children:"code.py"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"code.py (or main.py) is the default name for the executable\nPython file on microcontrollers flashed with CircuitPython.\nYou'll see we stick to the code.py convention with our files."})}),"\n",(0,t.jsx)(n.h4,{id:"hellomainloopapp",children:"HelloMainLoopApp"}),"\n",(0,t.jsxs)(n.p,{children:["Here we create ",(0,t.jsx)(n.code,{children:"HelloMainLoopApp"})," as a simple example of the\ntypes of ",(0,t.jsx)(n.code,{children:"AppClass"})," you can create."]}),"\n",(0,t.jsxs)(n.p,{children:["In our ",(0,t.jsx)(n.code,{children:"HelloMainLoopApp"})," constructor, we create a ",(0,t.jsx)(n.code,{children:"TickRepeater"}),"\nthat will stream the automatic control command to the dashboard\nevery 50 ms (at a 20hz rate)."]}),"\n",(0,t.jsxs)(n.p,{children:["In our ",(0,t.jsx)(n.code,{children:"iter()"})," call, we:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check for control keys entered into the serial console\n[",(0,t.jsx)(n.code,{children:"<space bar>"})," for toggling auto mode, & ",(0,t.jsx)(n.code,{children:"w"})," / ",(0,t.jsx)(n.code,{children:"a"})," / ",(0,t.jsx)(n.code,{children:"s"})," / ",(0,t.jsx)(n.code,{children:"d"}),"\n[fwd / left / rev / right] for adjusting velocities]."]}),"\n",(0,t.jsxs)(n.li,{children:["Parse through all received CAN messages, sorting only for the\n",(0,t.jsx)(n.code,{children:"AmigaTpdo1"})," responses coming from the dashboard."]}),"\n",(0,t.jsxs)(n.li,{children:["Send the most up-to-date auto control commands, based on serial\nconsole entries, in an ",(0,t.jsx)(n.code,{children:"AmigaRpdo1"})," formatted packet."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,t.jsx)(n.h3,{id:"1-connection",children:"1. Connection"}),"\n",(0,t.jsx)(n.p,{children:"Connect your microcontroller as in the following diagram:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53625197/187538323-f70bb5d5-8c9a-40c2-ab75-25fd6c80acfb.png",alt:"connection"})}),"\n",(0,t.jsx)(n.h3,{id:"2-load-the-code",children:"2. Load the code"}),"\n",(0,t.jsxs)(n.p,{children:["From ",(0,t.jsx)(n.code,{children:"amiga-dev-kit/circuitpy/"}),", drop the ",(0,t.jsx)(n.code,{children:"code.py"})," file and\nthe ",(0,t.jsx)(n.code,{children:"lib/"})," folder directly into the root of the mounted\n",(0,t.jsx)(n.code,{children:"CIRCUITPY"})," drive, as seen below."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"This assumes you have already cloned the amiga-dev-kit repo."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd <to_your_base_directory>\ngit clone git@github.com:farm-ng/amiga-dev-kit.git\n"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53625197/187538475-9d301b0f-f303-4ead-a1e7-b55c6b449b9f.png",alt:"hello_main_loop_filesystem"})}),"\n",(0,t.jsx)(n.h3,{id:"3-open-the-serial-console",children:"3. Open the Serial Console"}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["Mu is the recommended serial console program by adafruit on\ntheir ",(0,t.jsx)(n.a,{href:"https://learn.adafruit.com/welcome-to-circuitpython/kattni-connecting-to-the-serial-console",children:(0,t.jsx)(n.strong,{children:"CircuitPython serial console page"})}),".\nMu has a built in plotter for tuples printed to the serial\nconsole (print statements in the python code on your\nmicrocontroller)."]}),(0,t.jsx)(n.p,{children:"We've found that Mu can be a little unstable and freezes\noccasionally,\nso we'd recommend checking out their links for the \"advanced\"\nserial console:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://learn.adafruit.com/welcome-to-circuitpython/advanced-serial-console-on-windows",children:(0,t.jsx)(n.strong,{children:"Windows serial console"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://learn.adafruit.com/welcome-to-circuitpython/advanced-serial-console-on-linux",children:(0,t.jsx)(n.strong,{children:"Linux serial console"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://learn.adafruit.com/welcome-to-circuitpython/advanced-serial-console-on-mac-and-linux",children:(0,t.jsx)(n.strong,{children:"Mac serial console"})})}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"You should see an output of the current state of the robot,\nsimilar to the screenshot below, and you should see the values\nupdate as the robot drives around."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53625197/187538512-90d53da9-8588-4d15-9973-49cca16bff72.png",alt:"hello_main_loop_console"})}),"\n",(0,t.jsx)(n.h3,{id:"4-enable-auto",children:"4. Enable AUTO"}),"\n",(0,t.jsx)(n.h4,{id:"on-the-dashboard",children:"On the dashboard"}),"\n",(0,t.jsxs)(n.p,{children:["Navigate to the Auto mode tab on your dashboard, and click the ",(0,t.jsx)(n.code,{children:"[AUTO CONTROL]"})," button.\nThe ",(0,t.jsx)(n.code,{children:"[AUTO READY]"})," icon should turn yellow,\nindicating the dashboard is ready for a component to take ",(0,t.jsx)(n.code,{children:"Auto Control"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"in-the-serial-console",children:"In the serial console"}),"\n",(0,t.jsxs)(n.p,{children:["Hit the space bar in your serial console to request auto\ncontrol, and you should see the ",(0,t.jsx)(n.code,{children:"[AUTO READY]"})," turn green,\nindicating the dashboard is in ",(0,t.jsx)(n.code,{children:"Auto Control"})," mode."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"NOTE: The space bar may not register every press, so use the dash indicators!"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-drive-the-robot",children:"5. Drive the robot"}),"\n",(0,t.jsxs)(n.p,{children:["In the serial console, increase / decrease the robot forward /\nreverse speed with the ",(0,t.jsx)(n.code,{children:"w"})," & ",(0,t.jsx)(n.code,{children:"s"})," keys, and increase / decrease\nthe robot angular rate with the ",(0,t.jsx)(n.code,{children:"a"})," & ",(0,t.jsx)(n.code,{children:"d"})," keys."]}),"\n",(0,t.jsx)(n.h3,{id:"6-release-auto",children:"6. Release AUTO"}),"\n",(0,t.jsxs)(n.p,{children:["Hit the space bar in the serial console to release auto\ncontrol and return to the ",(0,t.jsx)(n.code,{children:"[AUTO READY]"})," state. Or hit the E-Stop\non your Amiga!"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(96540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);