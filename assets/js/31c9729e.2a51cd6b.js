"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6740],{4322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));n(1839);const r={id:"filter-client",title:"Filter Client"},s=void 0,l={unversionedId:"examples/filter_client/filter-client",id:"examples/filter_client/filter-client",title:"Filter Client",description:"Link to filterclient/main.py",source:"@site/docs/examples/filter_client/README.md",sourceDirName:"examples/filter_client",slug:"/examples/filter_client/",permalink:"/docs/examples/filter_client/",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/filter_client/README.md",tags:[],version:"current",frontMatter:{id:"filter-client",title:"Filter Client"},sidebar:"examples",previous:{title:"Service Propagation",permalink:"/docs/examples/service_propagation/"},next:{title:"Monitor App",permalink:"/docs/examples/monitor_app/"}},o={},p=[{value:"Link to <code>filter_client/main.py</code>",id:"link-to-filter_clientmainpy",level:3},{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Install the example&#39;s dependencies",id:"2-install-the-examples-dependencies",level:3},{value:"3. Execute the Python script",id:"3-execute-the-python-script",level:3},{value:"4. Customize the run",id:"4-customize-the-run",level:3},{value:"5. Code overview",id:"5-code-overview",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"link-to-filter_clientmainpy"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/filter_client/main.py"},"Link to ",(0,a.kt)("inlineCode",{parentName:"a"},"filter_client/main.py"))),(0,a.kt)("p",null,"This example streams the results from the state estimation filter running on the Amiga."),(0,a.kt)("p",null,"The requirements to run this example are to have a\n",(0,a.kt)("a",{parentName:"p",href:"/docs/brain/"},(0,a.kt)("strong",{parentName:"a"},"farm-ng brain"))," running the ",(0,a.kt)("inlineCode",{parentName:"p"},"filter service"),".\nThe filter service will output the state, even if state estimation results are poor,\nas will be the case if certain data streams from device services are missing."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The state estimation filter service is a client of the following services:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"canbus"),(0,a.kt)("li",{parentName:"ul"},"gps"),(0,a.kt)("li",{parentName:"ul"},"oak0"))),(0,a.kt)("h3",{id:"1-install-the-farm-ng-brain-adk-package"},"1. Install the ",(0,a.kt)("a",{parentName:"h3",href:"/docs/brain/brain-install"},"farm-ng Brain ADK package")),(0,a.kt)("h3",{id:"2-install-the-examples-dependencies"},"2. Install the example's dependencies"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/filter_client\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -r requirements.txt\n")),(0,a.kt)("h3",{id:"3-execute-the-python-script"},"3. Execute the Python script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python3 main.py --service-config service_config.json\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"By default, the host address is assumed to be ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost"),".")),(0,a.kt)("h3",{id:"4-customize-the-run"},"4. Customize the run"),(0,a.kt)("p",null,"Let's have some fun and stream the state to your laptop over the Wifi,\nusing the gRPC client."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You need to discover the WiFi address of your Amiga Brain using\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"WifiClient")," (coming soon)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python3 main.py --help\n\n# usage: amiga-filter-stream [-h] --service-config SERVICE_CONFIG\n\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --service-config SERVICE_CONFIG\n#                         The filter service config.\n")),(0,a.kt)("p",null,"To customize the run, you need to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"service_config.json"),"\nby modifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"host")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"port")," fields."),(0,a.kt)("h3",{id:"5-code-overview"},"5. Code overview"),(0,a.kt)("p",null,"In this example we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"EventClient")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe")," method to receive the filter state stream."),(0,a.kt)("p",null,"In this example, we:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Extract the timestamp from when the state estimation filter sent the pose",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Which is immediately after it estimates the state"))),(0,a.kt)("li",{parentName:"ul"},"Create a ",(0,a.kt)("inlineCode",{parentName:"li"},"Pose3F64")," object, a C++ object in ",(0,a.kt)("inlineCode",{parentName:"li"},"farm-ng-core")," made available through pybind"),(0,a.kt)("li",{parentName:"ul"},"Extract other important state values, including the uncertainty or confidence in the state estimate")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'async def main(service_config_path: Path) -> None:\n    """Run the filter service client.\n    Args:\n        service_config_path (Path): The path to the filter service config.\n    """\n    # create a client to the filter service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    async for event, message in EventClient(config).subscribe(config.subscriptions[0], decode=True):\n        # Find the monotonic service send timestamp (this is the time the filter calculated the state),\n        # or the first timestamp if not available.\n        stamp = (\n            get_stamp_by_semantics_and_clock_type(event, StampSemantics.SERVICE_SEND, "monotonic")\n            or event.timestamps[0].stamp\n        )\n\n        # Unpack the filter state message\n        pose: Pose3F64 = Pose3F64.from_proto(message.pose)\n        orientation: float = message.heading\n        uncertainties: list[float] = [message.uncertainty_diagonal.data[i] for i in range(3)]\n\n        # Print some key details about the filter state\n        print("\\n###################")\n        print(f"Timestamp: {stamp}")\n        print("Filter state received with pose:")\n        print(f"x: {pose.translation[0]:.3f} m, y: {pose.translation[1]:.3f} m,\n                                                orientation: {orientation:.3f} rad")\n        print(f"Parent frame: {pose.frame_a} -> Child frame: {pose.frame_b}")\n        print(f"Filter has converged: {message.has_converged}")\n        print("And pose uncertainties:")\n        print(f"x: {uncertainties[0]:.3f} m, y: {uncertainties[1]:.3f} m,\n                                             orientation: {uncertainties[2]:.3f} rad")\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-filter-stream")\n    parser.add_argument("--service-config", type=Path, required=True, help="The filter service config.")\n    args = parser.parse_args()\n\n    asyncio.run(main(args.service_config))\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We highly recommend to have some basic knowledge about\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"asyncio"))),".")))}c.isMDXComponent=!0}}]);