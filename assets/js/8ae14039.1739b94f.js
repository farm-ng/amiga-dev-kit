"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9482],{161:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=t(7462),i=(t(7294),t(3905));t(1839);const r={id:"camera-calibration",title:"Camera Calibration"},o=void 0,l={unversionedId:"examples/camera_calibration/camera-calibration",id:"examples/camera_calibration/camera-calibration",title:"Camera Calibration",description:"Camera Calibration",source:"@site/docs/examples/camera_calibration/README.md",sourceDirName:"examples/camera_calibration",slug:"/examples/camera_calibration/",permalink:"/docs/examples/camera_calibration/",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/camera_calibration/README.md",tags:[],version:"current",frontMatter:{id:"camera-calibration",title:"Camera Calibration"},sidebar:"examples",previous:{title:"FPV Example",permalink:"/docs/examples/FPV/"},next:{title:"Camera Client",permalink:"/docs/examples/camera_client/"}},s={},c=[{value:"Camera Calibration",id:"camera-calibration",level:2},{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Setup",id:"2-setup",level:3},{value:"3. Install the example&#39;s dependencies",id:"3-install-the-examples-dependencies",level:3},{value:"4. Execute the Python script",id:"4-execute-the-python-script",level:3},{value:"5. Customize run",id:"5-customize-run",level:3},{value:"6. Code overview",id:"6-code-overview",level:3}],m={toc:c};function p(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"camera-calibration"},"Camera Calibration"),(0,i.kt)("p",null,"This ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/camera_calibration/main.py"},"example"),"\noperates as a standalone Python script,\nin which an ",(0,i.kt)("inlineCode",{parentName:"p"},"EventClient")," to an Oak camera service running on an Amiga brain is created.\nThe calibration of the Oak camera is printed in the terminal."),(0,i.kt)("p",null,"You can either run this example directly on a brain by ",(0,i.kt)("inlineCode",{parentName:"p"},"ssh"),"'ing in,\nor use your local PC.\nIf using your local PC, it should be either connected to the same local network as the brain\nor linked to it through tailscale."),(0,i.kt)("p",null,"Ensure that a ",(0,i.kt)("a",{parentName:"p",href:"/docs/brain/"},(0,i.kt)("strong",{parentName:"a"},"farm-ng brain"))," running Oak cameras is active."),(0,i.kt)("h3",{id:"1-install-the-farm-ng-brain-adk-package"},"1. Install the ",(0,i.kt)("a",{parentName:"h3",href:"/docs/brain/brain-install"},"farm-ng Brain ADK package")),(0,i.kt)("h3",{id:"2-setup"},"2. Setup"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment.")),(0,i.kt)("p",null,"Create first a virtual environment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv venv\nsource venv/bin/activate\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/camera_calibration\n")),(0,i.kt)("h3",{id:"3-install-the-examples-dependencies"},"3. Install the example's dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -r requirements.txt\n")),(0,i.kt)("h3",{id:"4-execute-the-python-script"},"4. Execute the Python script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python3 main.py --service-config service_config.json\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"By default, the camera host is assumed to be ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost"),".\nIf running the example from your local PC, you should replace ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost")," with your brain's\nIP address (e.g., 100.67.32.5) or your Amiga's name (e.g., aluminum-pineapple -\nonly supported if connected via tailscale).")),(0,i.kt)("h3",{id:"5-customize-run"},"5. Customize run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# usage: amiga-camera-calibration [-h] --service-config SERVICE_CONFIG\n#\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --service-config SERVICE_CONFIG\n#                         The camera config.\n")),(0,i.kt)("h3",{id:"6-code-overview"},"6. Code overview"),(0,i.kt)("p",null,"In this example we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"EventClient")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"request_reply"),"\nmethod to receive the camera camera calibration.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"request_reply")," method is a coroutine that returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Future")," object.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Future")," object is used to retrieve the result of the request."),(0,i.kt)("p",null,"The path to the calibration service is ",(0,i.kt)("inlineCode",{parentName:"p"},"/calibration")," and the request message is ",(0,i.kt)("inlineCode",{parentName:"p"},"Empty"),".\nThe response message is ",(0,i.kt)("inlineCode",{parentName:"p"},"OakCalibration"),", which is automatically decoded by the ",(0,i.kt)("inlineCode",{parentName:"p"},"request_reply"),"\nmethod using the ",(0,i.kt)("inlineCode",{parentName:"p"},"decode=True")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'async def main(service_config_path: Path) -> None:\n    """Request the camera calibration from the camera service.\n\n    Args:\n        service_config_path (Path): The path to the camera service config.\n    """\n    # create a client to the camera service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    # get the calibration message\n    calibration: oak_pb2.OakCalibration =\n        await EventClient(config).request_reply("/calibration", Empty(), decode=True)\n    print(calibration)\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-camera-calibration")\n    parser.add_argument("--service-config", type=Path, required=True, help="The camera config.")\n    args = parser.parse_args()\n\n    asyncio.run(main(args.service_config))\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We highly recommend to have some basic knowledge about\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},(0,i.kt)("strong",{parentName:"a"},(0,i.kt)("inlineCode",{parentName:"strong"},"asyncio"))),".")))}p.isMDXComponent=!0}}]);