"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[384],{4126:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=r(5893),t=r(1151);const i={id:"events-recorder",title:"Events Recorder"},a=void 0,o={id:"examples/events_recorder/events-recorder",title:"Events Recorder",description:"Before diving into this example, here's a quick heads-up on what you'll need to be familiar with:",source:"@site/docs/examples/events_recorder/README.md",sourceDirName:"examples/events_recorder",slug:"/examples/events_recorder/",permalink:"/docs/examples/events_recorder/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/events_recorder/README.md",tags:[],version:"current",frontMatter:{id:"events-recorder",title:"Events Recorder"},sidebar:"examples",previous:{title:"Record and Access data",permalink:"/docs/examples/import_log_file/"},next:{title:"File Reader",permalink:"/docs/examples/file_reader/"}},c={},d=[{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Setup",id:"2-setup",level:3},{value:"3. Install the example&#39;s dependencies",id:"3-install-the-examples-dependencies",level:3},{value:"4. Execute the Python script",id:"4-execute-the-python-script",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{title:"Basic Knowledge Requirements",type:"info",children:[(0,s.jsx)(n.p,{children:"Before diving into this example, here's a quick heads-up on what you'll need to be familiar with:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Python Programming"}),": It's essential to be well-versed in Python, as the example leverages foundational\nconcepts such as functions, conditional statements, and command-line argument parsing using the\nargparse module."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/concepts/recorder_service/",children:"farm-ng Recorder Service Overview"})}),":\nThis overview provides a base understanding of the gRPC service the client you create will connect to."]}),"\n"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/py/examples/event_recorder/main.py",children:(0,s.jsx)(n.strong,{children:"Events Recorder"})}),"\nexample we show how to record events from farm-ng-brain using\nthe ",(0,s.jsx)(n.code,{children:"EventClient"})," class."]}),"\n",(0,s.jsxs)(n.h3,{id:"1-install-the-farm-ng-brain-adk-package",children:["1. Install the ",(0,s.jsx)(n.a,{href:"/docs/brain/brain-install",children:"farm-ng Brain ADK package"})]}),"\n",(0,s.jsx)(n.h3,{id:"2-setup",children:"2. Setup"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment."})}),"\n",(0,s.jsx)(n.p,{children:"Create first a virtual environment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 -m venv venv\nsource venv/bin/activate\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/events_recorder\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-install-the-examples-dependencies",children:"3. Install the example's dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip3 install -r requirements.txt\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-execute-the-python-script",children:"4. Execute the Python script"}),"\n",(0,s.jsxs)(n.p,{children:["In the provided example, we show how to implement the ",(0,s.jsx)(n.code,{children:"/start"})," and ",(0,s.jsx)(n.code,{children:"/stop"}),"\nrequests to start and stop the recording of events. We also provide two example profiles\n",(0,s.jsx)(n.code,{children:"record_camera_config.json"})," and ",(0,s.jsx)(n.code,{children:"record_fiter_config.json"})," that can be used to record the\ncamera and filter events."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def start_recording(\n    service_config: EventServiceConfig, recording_profile: EventServiceConfigList\n) -> None:\n    reply = await EventClient(service_config).request_reply(\n        "/start", recording_profile, decode=True\n    )\n    print(reply)\n\n\nasync def stop_recording(service_config: EventServiceConfig) -> None:\n    reply = await EventClient(service_config).request_reply(\n        "/stop", Empty(), decode=True\n    )\n    print(reply)\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-camera-calibration")\n    parser.add_argument(\n        "--service-config", type=Path, required=True, help="The camera config.")\n\n    subparsers = parser.add_subparsers(dest="command")\n\n    start_command = subparsers.add_parser("start_recording", help="Start recording.")\n    start_command.add_argument(\n        "--recording-profile", type=Path, required=True, help="The recording profile.")\n\n    stop_command = subparsers.add_parser("stop_recording", help="Stop recording.")\n\n    args = parser.parse_args()\n\n    # create a client to the camera service\n    service_config: EventServiceConfig = proto_from_json_file(\n        args.service_config, EventServiceConfig()\n    )\n\n    if args.command == "start_recording":\n        recording_profile = proto_from_json_file(\n            args.recording_profile, EventServiceConfigList()\n        )\n        asyncio.run(start_recording(service_config, recording_profile))\n\n    if args.command == "stop_recording":\n        asyncio.run(stop_recording(service_config))\n'})}),"\n",(0,s.jsx)(n.p,{children:"To start recording the camera events, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python main.py --service-config service_config.json start_recording --recording-profile record_camera_config.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see a similar output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'value: "/mnt/data/2023_09_28_10_24_07_212687_lead-mango"\n'})}),"\n",(0,s.jsx)(n.p,{children:"In order to stop the recording, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python main.py --service-config service_config.json stop_recording\n"})}),"\n",(0,s.jsx)(n.p,{children:"Finally, to validate that the events have been recorded, you can run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python -m farm_ng.core.events_file_reader playback /mnt/data/2023_09_28_10_24_07_212687_lead-mango.0000.bin\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var s=r(7294);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);