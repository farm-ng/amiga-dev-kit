"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[6754],{79007:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(74848),s=t(28453);const a={id:"device-streams",title:"02 - Main Implementation"},r="Main Implementation",o={id:"tutorials/virtual_joystick/device-streams",title:"02 - Main Implementation",description:"Kivy",source:"@site/docs/tutorials/virtual_joystick/02_main_implementation.md",sourceDirName:"tutorials/virtual_joystick",slug:"/tutorials/virtual_joystick/device-streams",permalink:"/docs/tutorials/virtual_joystick/device-streams",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/tutorials/virtual_joystick/02_main_implementation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"device-streams",title:"02 - Main Implementation"},sidebar:"examples",previous:{title:"01 - Widget",permalink:"/docs/tutorials/virtual_joystick/virtual-joystick-widget"},next:{title:"03 - Further Exercises",permalink:"/docs/tutorials/virtual_joystick/further-exercises"}},l={},c=[{value:"Kivy",id:"kivy",level:2},{value:"Adding the Widget",id:"adding-the-widget",level:3},{value:"Adding Text",id:"adding-text",level:3},{value:"Python Implementation",id:"python-implementation",level:2},{value:"Imports",id:"imports",level:3},{value:"Kivy String Variables",id:"kivy-string-variables",level:3},{value:"Class Initialization",id:"class-initialization",level:3},{value:"Client Configurations",id:"client-configurations",level:3},{value:"Sending CAN Messages",id:"sending-can-messages",level:3},{value:"Other notes",id:"other-notes",level:2},{value:"service_config.json",id:"service_configjson",level:3},{value:"Local Development",id:"local-development",level:3},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"main-implementation",children:"Main Implementation"})}),"\n",(0,i.jsx)(n.h2,{id:"kivy",children:"Kivy"}),"\n",(0,i.jsxs)(n.p,{children:["Now that we have the finished our custom widget we need to first add it to our applications kivy string.\nNavigating back to ",(0,i.jsx)(n.code,{children:"src/res/main.kv"})," we need to import our newly defined widget."]}),"\n",(0,i.jsx)(n.h3,{id:"adding-the-widget",children:"Adding the Widget"}),"\n",(0,i.jsx)(n.p,{children:"To do this, all we need to do is add an instance of our VirtualJoystickWidget to the same level as the\nimages tabbed panel.\nTabbedPanel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"    BoxLayout:\n        orientation: 'horizontal'\n        VirtualJoystickWidget:\n            id: joystick\n        TabbedPanel:\n            do_default_tab: False\n            id: tab_root\n            TabbedPanelItem:\n                text: \"rgb\"\n                Image:\n                    id: rgb\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When we run the code now, we should see:\n",(0,i.jsx)(n.img,{src:"https://github.com/farm-ng/amiga-dev-kit/assets/53889589/2d1f0f03-fd47-4b31-a5e6-73189f3802cd",alt:"Screenshot from 2024-01-26 13-52-50"})]}),"\n",(0,i.jsx)(n.h3,{id:"adding-text",children:"Adding Text"}),"\n",(0,i.jsx)(n.p,{children:"One additional feature we felt was important was to read information about\nthe dashboard state of the Amiga, this could MANUAL_READY, AUTO_ACIVE, or AUTO_READY, etc."}),"\n",(0,i.jsx)(n.p,{children:"This will be the final update to our kivy string.\nBefore the VirtualJoystickWidget, we will add a vertical stack of text boxes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    BoxLayout:\n        orientation: \'horizontal\'\n        BoxLayout:\n            size_hint_x: 0.3\n            orientation: \'vertical\'\n            Widget:\n                size_hint_y: 2.0\n            Label:\n                text: "Amiga State:"\n                font_size: 18\n                size_hint_y: 0.5\n            Label:\n                text: app.amiga_state\n                font_size: 18\n            Widget: # Empty placeholder\n            Label:\n                text: "Speed [m/s]:"\n                font_size: 18\n                size_hint_y: 0.5\n            Label:\n                text: app.amiga_speed\n                font_size: 18\n            Widget: # Empty placeholder\n            Label:\n                text: "Angular Rate [rad/s]:"\n                font_size: 18\n                size_hint_y: 0.5\n            Label:\n                text: app.amiga_rate\n                font_size: 18\n            Widget:\n                size_hint_y: 2.0\n        VirtualJoystickWidget:\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to the ",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/virtual-joystick-v2/blob/main/src/res/main.kv",children:(0,i.jsx)(n.code,{children:"src/res/main.kv"})}),"\nif the placement is confusing."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://github.com/farm-ng/amiga-dev-kit/assets/53889589/59207d68-f78e-42a3-ad67-9ea73c6dbcd4",alt:"Screenshot from 2024-01-26 13-53-24"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["In the\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/virtual-joystick/blob/main/src/res/main.kv",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"src/res/main.kv"})})}),"\nand ",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/virtual-joystick/blob/main/src/main.py",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"src/main.py"})})}),"\nfiles of the\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/virtual-joystick",children:(0,i.jsx)(n.strong,{children:"virtual-joystick"})}),"\napp we define the kivy app and Python implementation of the\n",(0,i.jsx)(n.code,{children:"VirtualJoystickApp"}),"."]}),(0,i.jsx)(n.p,{children:"You should open these files for reference as you follow along."})]}),"\n",(0,i.jsx)(n.h2,{id:"python-implementation",children:"Python Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"imports",children:"Imports"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["You should have already gone through the\n",(0,i.jsx)(n.a,{href:"/docs/tutorials/camera_streamer/camera-streamer-overview",children:(0,i.jsx)(n.strong,{children:"Camera Streamer Tutorial"})}),"\nbased on the\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/camera-streamer",children:(0,i.jsx)(n.strong,{children:"camera-streamer"})}),"\nexample app.\nUnderstanding these instructions will rely on understanding those!"]})}),"\n",(0,i.jsxs)(n.p,{children:["We will need to add a few more imports to the\n",(0,i.jsx)(n.a,{href:"/docs/tutorials/camera_streamer/camera-streamer-overview",children:(0,i.jsx)(n.strong,{children:"Camera Streamer Tutorial"})}),"\nto send and receive canbus messages."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from farm_ng.canbus.canbus_pb2 import Twist2d\nfrom farm_ng.canbus.packet import AmigaControlState\nfrom farm_ng.canbus.packet import AmigaTpdo1\n"})}),"\n",(0,i.jsx)(n.p,{children:"These imports are a part of the canbus API which will make more sense in application."}),"\n",(0,i.jsx)(n.h3,{id:"kivy-string-variables",children:"Kivy String Variables"}),"\n",(0,i.jsx)(n.p,{children:"To update the kivy string for the amigas, state, linear and angual velocity, we need to add:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'amiga_state = StringProperty("???")\namiga_speed = StringProperty("???")\namiga_rate = StringProperty("???")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"class-initialization",children:"Class Initialization"}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial, we introduce the service_config.json file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def __init__(\n    self,\n    service_config: EventServiceConfig,\n) -> None:\n    super().__init__()\n\n    self.counter: int = 0\n    self.service_config = service_config\n    self.async_tasks: list[asyncio.Task] = []\n    self.image_decoder = ImageDecoder()\n    self.view_name = "rgb"\n    self.max_speed: float = 1.0\n    self.max_angular_rate: float = 1.0\n'})}),"\n",(0,i.jsx)(n.h3,{id:"client-configurations",children:"Client Configurations"}),"\n",(0,i.jsx)(n.p,{children:"The app function looks a little different in this example vs the camera streamer.\nHere, we are using the EventServiceConfigList() function to create a list of services our custom application\nwill subscribe to."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'async def app_func(self):\n\n    async def run_wrapper() -> None:\n        # we don\'t actually need to set asyncio as the lib because it is\n        # the default, but it doesn\'t hurt to be explicit\n        await self.async_run(async_lib="asyncio")\n        for task in self.async_tasks:\n            task.cancel()\n\n    config_list = proto_from_json_file(\n        self.service_config, EventServiceConfigList()\n    )\n\n    oak0_client: EventClient | None = None\n    canbus_client: EventClient | None = None\n\n\n    for config in config_list.configs:\n        if config.name == "oak0":\n            oak0_client = EventClient(config)\n        elif config.name == "canbus":\n            canbus_client = EventClient(config)\n\n\n    # Confirm that EventClients were created for all required services\n    if None in [oak0_client,canbus_client]:\n        raise RuntimeError(\n            f"No {config} service config in {self.service_config}"\n        )\n\n    # Camera task\n    self.tasks: list[asyncio.Task] = [\n        asyncio.create_task(self.stream_camera(oak0_client, view_name))\n        for view_name in self.STREAM_NAMES\n    ]\n\n    self.tasks.append(asyncio.ensure_future(self.pose_generator(canbus_client)))\n\n    return await asyncio.gather(run_wrapper(),*self.tasks)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We create two clients in this example, the oak0_client and the canbus_client from the EventClient().\nHere is more information about the ",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-core",children:"event_service"})," framework."]}),"\n",(0,i.jsx)(n.h3,{id:"sending-can-messages",children:"Sending CAN Messages"}),"\n",(0,i.jsx)(n.p,{children:"This function has two main purposes, sending can messages and reading messages from the dashboard.\nThe dashboards tpd01 messages contains information about the state of the robot (manual, auto) and\nvelocities. We use the twist2d() structure to send desired velocities to the dashboard which is responsible\nfor converting those to individual wheel velocities."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'async def pose_generator(self, canbus_client: EventClient, period: float = 0.02):\n    """The pose generator generates twist messages"""\n    while self.root is None:\n        await asyncio.sleep(0.01)\n\n    twist = Twist2d()\n\n    joystick: VirtualJoystickWidget = self.root.ids["joystick"]\n\n    rate = canbus_client.config.subscriptions[0].every_n\n\n    async for event, payload in canbus_client.subscribe(\n        SubscribeRequest(uri=Uri(path="/state"), every_n=rate),\n        decode=False,\n    ):\n        message = payload_to_protobuf(event, payload)\n        tpdo1 = AmigaTpdo1.from_proto(message.amiga_tpdo1)\n\n        twist.linear_velocity_x = self.max_speed * joystick.joystick_pose.y\n        twist.angular_velocity = self.max_angular_rate * -joystick.joystick_pose.x\n\n        self.amiga_state = tpdo1.state.name\n        self.amiga_speed = "{:.4f}".format(twist.linear_velocity_x)\n        self.amiga_rate = "{:.4f}".format(twist.angular_velocity)\n\n        await canbus_client.request_reply("/twist", twist)\n        await asyncio.sleep(period)\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/py/farm_ng/canbus/packet.py",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AmigaTpdo1"})})}),"\nmessage comes from the dashboard and contains the:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"state of the Amiga (AmigaControlState)"}),"\n",(0,i.jsx)(n.li,{children:"measured speed (forward positive)"}),"\n",(0,i.jsx)(n.li,{children:"measured angular rate (left positive)"}),"\n"]}),(0,i.jsx)(n.p,{children:"This is the information you'll use for closed loop control!"})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["If you're curious to learn more about CAN bus in general, see\n",(0,i.jsx)(n.a,{href:"https://www.csselectronics.com/pages/can-bus-simple-intro-tutorial",children:(0,i.jsx)(n.strong,{children:"CSS Electronics - CAN Bus Explained"})}),".\nIn this virtual joystick tutorial, we are only teaching you to\ninteract with the canbus client through Amiga state messages."]})}),"\n",(0,i.jsxs)(n.p,{children:["To display the values in the ",(0,i.jsx)(n.code,{children:"Label"})," widgets we use a kivy\n",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.properties.html#kivy.properties.StringProperty",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"StringProperty"})})}),"\nfor each value.\nThese are bound to the corresponding ",(0,i.jsx)(n.code,{children:"Label"})," widget text fields,\nso we only need to update the value of the ",(0,i.jsx)(n.code,{children:"StringProperty"})," and\nwe do not need to update the text field of the ",(0,i.jsx)(n.code,{children:"Label"})," explicitly."]}),"\n",(0,i.jsx)(n.h2,{id:"other-notes",children:"Other notes"}),"\n",(0,i.jsx)(n.h3,{id:"service_configjson",children:"service_config.json"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/virtual-joystick-v2/blob/main/service_config.json",children:"service_config"}),"\nis used to store all the services\nthat your custom application will use in one place. Here you can specify\nwhich cameras you will be using and at what relative frequency (every_n) and port.\nWe suggest adjusting the every_n of the oak and canbus client and\nevaluate the performance of the app.\nWe will add the"]}),"\n",(0,i.jsx)(n.h3,{id:"local-development",children:"Local Development"}),"\n",(0,i.jsxs)(n.p,{children:["To run while developing, you can run ",(0,i.jsx)(n.code,{children:"./entry.sh"})," to compile and run the code."]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/py/farm_ng/canbus/packet.py",children:(0,i.jsx)(n.strong,{children:"farm_ng.canbus.packet"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/protos/farm_ng/canbus/canbus.proto",children:(0,i.jsx)(n.strong,{children:"canbus.proto"})})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);