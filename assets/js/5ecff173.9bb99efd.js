"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[7927],{6239:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=i(4848),t=i(8453);const r={id:"camera-stream",title:"02 - Python Implementation"},s="Python Implementation",o={id:"tutorials/camera_streamer/camera-stream",title:"02 - Python Implementation",description:"Similar to the last tutorial, this will give a break down of the most important features of the",source:"@site/docs/tutorials/camera_streamer/03_camera_stream.md",sourceDirName:"tutorials/camera_streamer",slug:"/tutorials/camera_streamer/camera-stream",permalink:"/docs/tutorials/camera_streamer/camera-stream",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/tutorials/camera_streamer/03_camera_stream.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"camera-stream",title:"02 - Python Implementation"},sidebar:"examples",previous:{title:"01 - Kivy Definition",permalink:"/docs/tutorials/camera_streamer/kivy-definition"},next:{title:"00 - Virtual Joystick Overview",permalink:"/docs/tutorials/virtual_joystick/virtual-joystick-overview"}},c={},l=[{value:"Rename Classes",id:"rename-classes",level:2},{value:"Update Imports",id:"update-imports",level:2},{value:"Update: CameraApp()",id:"update-cameraapp",level:2},{value:"Update: on_exit_btn(self)",id:"update-on_exit_btnself",level:3},{value:"Update: app_func(self)",id:"update-app_funcself",level:3},{value:"New Method: stream_camera()",id:"new-method-stream_camera",level:2},{value:"Event Client",id:"event-client",level:3},{value:"Decode and display",id:"decode-and-display",level:3},{value:"New Method: find_config_by_name()",id:"new-method-find_config_by_name",level:2},{value:"Update: main()",id:"update-main",level:2},{value:"Add File: service_config.json",id:"add-file-service_configjson",level:2},{value:"Update setup.cfg",id:"update-setupcfg",level:3},{value:"Running the app",id:"running-the-app",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"python-implementation",children:"Python Implementation"})}),"\n",(0,a.jsxs)(n.p,{children:["Similar to the last tutorial, this will give a break down of the most important features of the\n",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/camera-streamer",children:(0,a.jsx)(n.strong,{children:"camera-streamer"})})," repository"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The Python implementation of the\n",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/camera-streamer",children:(0,a.jsx)(n.strong,{children:"camera-streamer"})}),"\napp can be found at\n",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/camera-streamer/blob/main/src/main.py",children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/main.py"})})}),".\nYou should open that file for reference as you follow along."]})}),"\n",(0,a.jsx)(n.h2,{id:"rename-classes",children:"Rename Classes"}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/camera-streamer",children:(0,a.jsx)(n.strong,{children:"camera-streamer"})})," repository,\nwe have renamed some\nkeywords. Begin by navigating to ",(0,a.jsx)(n.code,{children:"src/main.py"})," in your app and open it.\nThere are 2 places to change the templated name:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Python",children:"# 1. Rename the class\nclass CameraApp(App):\n    def __init__(self) -> None:\n        super().__init__()\n\n...\n\n# 2. Run with the new class name\ntry:\n    loop.run_until_complete(CameraApp().app_func())\nexcept asyncio.CancelledError:\n    pass\n"})}),"\n",(0,a.jsx)(n.h2,{id:"update-imports",children:"Update Imports"}),"\n",(0,a.jsx)(n.p,{children:"This app is app will be the first real taste of the Amiga SDK.\nWe will now need to import farm-ng libraries to access the oak\ncamera streams."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from __future__ import annotations\n\nimport argparse\nimport asyncio\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import Literal\n\nfrom farm_ng.core.event_client import EventClient\nfrom farm_ng.core.event_service_pb2 import EventServiceConfig\nfrom farm_ng.core.event_service_pb2 import EventServiceConfigList\nfrom farm_ng.core.event_service_pb2 import SubscribeRequest\nfrom farm_ng.core.events_file_reader import payload_to_protobuf\nfrom farm_ng.core.events_file_reader import proto_from_json_file\nfrom farm_ng.core.uri_pb2 import Uri\nfrom turbojpeg import TurboJPEG\n\nos.environ["KIVY_NO_ARGS"] = "1"\n\nfrom kivy.config import Config  # noreorder # noqa: E402\n\nConfig.set("graphics", "resizable", False)\nConfig.set("graphics", "width", "1280")\nConfig.set("graphics", "height", "800")\nConfig.set("graphics", "fullscreen", "false")\nConfig.set("input", "mouse", "mouse,disable_on_activity")\nConfig.set("kivy", "keyboard_mode", "systemanddock")\n\nfrom kivy.app import App  # noqa: E402\nfrom kivy.lang.builder import Builder  # noqa: E402\nfrom kivy.graphics.texture import Texture  # noqa: E402\n\nlogger = logging.getLogger("amiga.apps.camera")\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can go line-by-line, however, we recommend that imports above\nclass CameraApp(App) looks like the list above."}),"\n",(0,a.jsx)(n.h2,{id:"update-cameraapp",children:"Update: CameraApp()"}),"\n",(0,a.jsx)(n.p,{children:"The camera app will generally follow the same format as the template tic-toc app.\nHowever, will also subscribe to a farm-ng service, in the case of this application,\nit will be the oak camera service."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class CameraApp(App):\n    """Base class for the main Kivy app."""\n\n    STREAM_NAMES = ["rgb", "disparity", "left", "right"]\n    def __init__(self, service_config: EventServiceConfig) -> None:\n        super().__init__()\n\n        self.service_config = service_config\n        self.image_decoder = TurboJPEG()\n\n        self.async_tasks: list[asyncio.Task] = []\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The EventServiceConfig contains the custom configuration used to\nspecify which specific services your custom application\nwill need to access. It will be stored in the variable ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"self.service_config"})})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"image_decoder"})})," is responsible for taking the raw bit\nstream from the oak service and packing them to\nmake python interpretable image frames.\nWe will use ",(0,a.jsx)(n.code,{children:"TurboJPEG"})," as the image decoder (it is much faster\nthan kivy's default image decoder)."]}),"\n",(0,a.jsx)(n.h3,{id:"update-on_exit_btnself",children:"Update: on_exit_btn(self)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    def on_exit_btn(self) -> None:\n        """Kills the running kivy application."""\n        for task in self.tasks:\n            task.cancel()\n        App.get_running_app().stop()\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This method is similar to the ",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template-kivy",children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"amiga-app-template-kivy"})})}),"\nhowever, this time we also need to cancel the async tasks that are running."]}),"\n",(0,a.jsx)(n.h3,{id:"update-app_funcself",children:"Update: app_func(self)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    async def app_func(self):\n\n        config_list = proto_from_json_file(\n            self.service_config, EventServiceConfigList()\n        )\n\n        oak0_client: EventClient | None = None\n\n        for config in config_list.configs:\n            if config.name == "oak0":\n                oak0_client = EventClient(config)\n\n        if None in [oak0_client]:\n            raise RuntimeError(f"No {config} service config in {self.service_config}")\n\n        # stream camera frames\n        self.tasks: list[asyncio.Task] = [\n            asyncio.create_task(self.stream_camera(oak0_client, view_name))\n            for view_name in self.STREAM_NAMES\n        ]\n\n        return await asyncio.gather(run_wrapper(), *self.tasks)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["More information can be found here:\n",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-core/blob/main/py/farm_ng/core/event_client.py",children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"farm-ng-core"})})}),"\nand the ",(0,a.jsx)(n.a,{href:"/docs/examples/camera_client/",children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"Oak Camera Client"})})})," example."]}),"\n",(0,a.jsxs)(n.p,{children:["Within this repository and example, you can see how ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"config_list"})})," and ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"oak0_client"})})," are made."]}),"\n",(0,a.jsx)(n.p,{children:"Finally, once the oak0_client is made, it can be used to subscribe to the camera streams."}),"\n",(0,a.jsx)(n.h2,{id:"new-method-stream_camera",children:"New Method: stream_camera()"}),"\n",(0,a.jsx)(n.p,{children:"Now, add the function stream_camera. The loop for view_name in STREAM_NAMES\nmakes four instances of the stream_camera method.\nWe make all four instances as opposed to only one because rather\nthan changing the async tasks, we can conditionally display\nthe image streams."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'async def stream_camera(\n        self,\n        oak_client: EventClient,\n        view_name: Literal["rgb", "disparity", "left", "right"] = "rgb",\n    ) -> None:\n        """Subscribes to the camera service and populates the tabbed panel with all 4 image streams."""\n        while self.root is None:\n            await asyncio.sleep(0.01)\n\n        rate = oak_client.config.subscriptions[0].every_n\n\n        async for event, payload in oak_client.subscribe(\n            SubscribeRequest(uri=Uri(path=f"/{view_name}"), every_n=rate),\n            decode=False,\n        ):\n            self.view_name = self.root.ids["tab_root"].current_tab.text\n\n            if view_name == self.view_name:\n                message = payload_to_protobuf(event, payload)\n                try:\n                    img = self.image_decoder.decode(message.image_data)\n                except Exception as e:\n                    logger.exception(f"Error decoding image: {e}")\n                    continue\n\n                # create the opengl texture and set it to the image\n                texture = Texture.create(\n                    size=(img.shape[1], img.shape[0]), icolorfmt="bgr"\n                )\n                texture.flip_vertical()\n                texture.blit_buffer(\n                    bytes(img.data),\n                    colorfmt="bgr",\n                    bufferfmt="ubyte",\n                    mipmap_generation=False,\n                )\n                self.root.ids[view_name].texture = texture\n'})}),"\n",(0,a.jsx)(n.h3,{id:"event-client",children:"Event Client"}),"\n",(0,a.jsx)(n.p,{children:"The client-service framework used here is vital to communicate with the Amiga."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'async for _, message in EventClient(self.service_config).subscribe(\n    SubscribeRequest(\n        uri=Uri(path=f"/{[view_name]}"), every_n=self.stream_every_n\n    ),\n    decode=True,\n):\n'})}),"\n",(0,a.jsx)(n.p,{children:"The EventClient is listening to all of the messages being sent\nby each of the services on the Amiga."}),"\n",(0,a.jsx)(n.p,{children:'This class is the "on-ramp" used to access the Amigas communication\nhighway. All the other vehicles on the highway are messages from the\nother services. The, oaks, canbus, trackfollower, etc... can all be\naccessed from this EventClient.'}),"\n",(0,a.jsx)(n.p,{children:"It can also be used for subsrbibing to all other services that might be used\nby your custom application."}),"\n",(0,a.jsxs)(n.p,{children:["More details on the .subscribe() method can be found here:\n",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-core/blob/main/py/farm_ng/core/event_client.py",children:(0,a.jsx)(n.strong,{children:"event_client.py"})})]}),"\n",(0,a.jsx)(n.p,{children:"SubscribeRequest accepts an uri (message name) and a relative frequency (every_n). This\nis considered a relative frequency because the oak service operates at\n10hz while the canbus operates at 50hz."}),"\n",(0,a.jsx)(n.h3,{id:"decode-and-display",children:"Decode and display"}),"\n",(0,a.jsx)(n.p,{children:"Finally, we can decode and display the images received from the\nstream."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'  # create the opengl texture and set it to the image\n  texture = Texture.create(size=(img.shape[1], img.shape[0]), icolorfmt="bgr")\n  texture.flip_vertical()\n  texture.blit_buffer(\n      bytes(img.data),\n      colorfmt="bgr",\n      bufferfmt="ubyte",\n      mipmap_generation=False,\n  )\n  self.root.ids[view_name].texture = texture\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For each of the image streams, we update the ",(0,a.jsx)(n.code,{children:"Image"})," widget\n",(0,a.jsx)(n.code,{children:"Texture"})," in the ",(0,a.jsx)(n.code,{children:"TabbedPanel"})," with the corresponding decoded\nimage.\nThe ",(0,a.jsx)(n.code,{children:"Image"})," widgets in the ",(0,a.jsx)(n.code,{children:"TabbedPanel"})," accessed by their kivy\nid."]}),"\n",(0,a.jsx)(n.h2,{id:"new-method-find_config_by_name",children:"New Method: find_config_by_name()"}),"\n",(0,a.jsx)(n.p,{children:"We've made stock configurations for each of the services."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def find_config_by_name(\n    service_configs: EventServiceConfigList, name: str\n) -> EventServiceConfig | None:\n    """Utility function to find a service config by name.\n\n    Args:\n        service_configs: List of service configs\n        name: Name of the service to find\n    """\n    for config in service_configs.configs:\n        if config.name == name:\n            return config\n    return None\n'})}),"\n",(0,a.jsx)(n.p,{children:"Should you only provide the name of the service in the configuration\nfile, this will return a complete configuration for your custom application."}),"\n",(0,a.jsx)(n.h2,{id:"update-main",children:"Update: main()"}),"\n",(0,a.jsx)(n.p,{children:"This example is used to demonstrate how you could specify\nspecific services to subscribe to from the command line."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="template-app")\n\n    # Add additional command line arguments here\n    parser.add_argument("--service-config", type=Path, default="service_config.json")\n    args = parser.parse_args()\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_until_complete(CameraApp(args.service_config).app_func())\n    except asyncio.CancelledError:\n        pass\n    loop.close()\n'})}),"\n",(0,a.jsx)(n.p,{children:"service_config.json is a list of each of the services you've requested\nfor your application. For this example, its only a single oak service\nbut it could modified to add more cameras or canbus for example."}),"\n",(0,a.jsx)(n.h2,{id:"add-file-service_configjson",children:"Add File: service_config.json"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "configs": [\n        {\n        "name": "oak0",\n        "port": 50010,\n        "host": "localhost",\n        "log_level": "INFO",\n        "subscriptions": [\n            {\n                "uri": {\n                    "path": "*",\n                    "query": "service_name=oak0"\n                },\n                "every_n": 1\n            }\n        ]\n    }\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"update-setupcfg",children:"Update setup.cfg"}),"\n",(0,a.jsxs)(n.p,{children:["In order to import everything we need, we must add the library ",(0,a.jsx)(n.code,{children:"PyTurboJPEG"})," to\nthe\n",(0,a.jsx)(n.a,{href:"https://github.com/farm-ng/camera-streamer/blob/main/setup.cfg",children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"setup.cfg"})})}),"\nfile so the dependency installs."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"install_requires =\n    wheel\n    kivy\n    farm_ng_amiga\n    PyTurboJPEG\n"})}),"\n",(0,a.jsx)(n.h2,{id:"running-the-app",children:"Running the app"}),"\n",(0,a.jsx)(n.p,{children:"To run the app:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["run the command ",(0,a.jsx)(n.code,{children:"./install.sh"})," and click the icon on the brain screen"]}),"\n",(0,a.jsxs)(n.li,{children:["run the command ",(0,a.jsx)(n.code,{children:"./entry.sh"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53625197/216075393-6e578a01-677e-4279-b224-70fd3f73ce5f.png",alt:"camera-streamer"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var a=i(6540);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);