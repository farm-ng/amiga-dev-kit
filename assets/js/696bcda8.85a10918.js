"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[7256],{7312:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var n=i(5893),s=i(1151);const t={id:"recorder-overview",title:"Recorder"},o="Recorder Service Overview",c={id:"concepts/recorder_service/recorder-overview",title:"Recorder",description:"The Recorder App/Service is the backbone of the Amiga's data logging and playback functionality.",source:"@site/docs/concepts/recorder_service/README.md",sourceDirName:"concepts/recorder_service",slug:"/concepts/recorder_service/",permalink:"/docs/concepts/recorder_service/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/concepts/recorder_service/README.md",tags:[],version:"current",frontMatter:{id:"recorder-overview",title:"Recorder"},sidebar:"Concepts",previous:{title:"GPS",permalink:"/docs/concepts/gps_service/"},next:{title:"Filter",permalink:"/docs/concepts/filter_service/"}},a={},d=[{value:"Purpose",id:"purpose",level:2},{value:"Subscriptions",id:"subscriptions",level:2},{value:"Available Topics for Recording",id:"available-topics-for-recording",level:2},{value:"Canbus Topics",id:"canbus-topics",level:3},{value:"Oak Topics",id:"oak-topics",level:3},{value:"GPS Topics",id:"gps-topics",level:3},{value:"Filter Topics",id:"filter-topics",level:3},{value:"Recording Profile",id:"recording-profile",level:2},{value:"API",id:"api",level:2},{value:"Data Storage",id:"data-storage",level:2},{value:"How to Use",id:"how-to-use",level:2}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"recorder-service-overview",children:"Recorder Service Overview"}),"\n",(0,n.jsx)(r.p,{children:"The Recorder App/Service is the backbone of the Amiga's data logging and playback functionality.\nIt is designed to capture and store raw data from various robot services, facilitating later\nanalysis, debugging, and model training."}),"\n",(0,n.jsx)(r.h2,{id:"purpose",children:"Purpose"}),"\n",(0,n.jsx)(r.p,{children:"The primary objective of the Recorder Service is to provide a robust mechanism for recording\ndata streams from different services. This is invaluable for tasks such as training computer\nvision/AI models, where capturing field imagery is essential.\nFor instance, when developing a precision sprayer application for weeds, one would\nfirst traverse the field, recording data to train a model to detect weeds."}),"\n",(0,n.jsx)(r.h2,{id:"subscriptions",children:"Subscriptions"}),"\n",(0,n.jsx)(r.p,{children:"The Recorder Service is a subscriber to the following services:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Canbus"}),"\n",(0,n.jsx)(r.li,{children:"Oak (Multiple Oak topics may be available, depending on the number of Oak cameras connected,\ne.g., oak0, oak1, ...)"}),"\n",(0,n.jsx)(r.li,{children:"GPS Service"}),"\n",(0,n.jsx)(r.li,{children:"Filter Service"}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"available-topics-for-recording",children:"Available Topics for Recording"}),"\n",(0,n.jsx)(r.p,{children:"The Recorder Service offers a variety of topics that can be recorded.\nEach topic provides specific data streams from the robot's various services.\nHere's a breakdown of each topic:"}),"\n",(0,n.jsxs)(r.admonition,{type:"tip",children:[(0,n.jsxs)(r.p,{children:["Check out the protobuf messages streamed on these topics at:",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(r.a,{href:"https://github.com/farm-ng/farm-ng-amiga/tree/main/protos/farm_ng",children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"farm-ng-amiga/protos/"})})}),"."]}),(0,n.jsxs)(r.p,{children:["Some of which may inherit from the protobuf messages found at:",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(r.a,{href:"https://github.com/farm-ng/farm-ng-core/tree/main/protos/farm_ng/core",children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"farm-ng-core/protos/"})})})]})]}),"\n",(0,n.jsx)(r.h3,{id:"canbus-topics",children:"Canbus Topics"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"canbus/health"}),": Provides health metrics for the Canbus service, such as publishing frequency."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"canbus/raw_messages"}),": Streams all messages received from the CAN bus by the canbus service.\nYou can parse and unpack these messages to see details of the motors (e.g., rpm, temperature),\nof your Amiga (e.g., battery voltage, velocity, whether auto-mode is engaged),\nand other pertinent information."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"canbus/twist"}),": Outputs the linear and angular velocities of the robot, offering insights\ninto its movement dynamics."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"oak-topics",children:"Oak Topics"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/health"}),": Delivers health metrics for the Oak service, including publishing frequency."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/calibration"}),": Streams the current calibration settings of the Oak device,\nensuring the camera's accuracy."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/disparity"}),": Outputs the disparity image calculated from the left/right stereo images,\nused for depth perception and 3D mapping."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/imu"}),": Streams 3-D accelerometer & gyroscope values from the Oak camera's internal IMU,\ngiving insights into the robot's orientation and movement."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/left"}),": Outputs the feed from the stereo left camera of the Oak device."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/right"}),": Outputs the feed from the stereo right camera of the Oak device."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"oak/rgb"}),": Streams the stereo RGB image from the Oak device, providing full-color\nvisuals of the robot's environment."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"gps-topics",children:"GPS Topics"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"gps/health"}),": Offers health metrics for the GPS service, such as publishing frequency."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"gps/pvt"}),": Streams GPS Position, Velocity, and Time (PVT) messages, giving a comprehensive\nview of the robot's location and movement."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"gps/relposned"}),": Provides GPS relative position in North, East, Down (N-E-D) coordinates,\noffering a detailed spatial orientation of the robot."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"filter-topics",children:"Filter Topics"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"filter/health"}),": Delivers health metrics for the Filter service, including publishing frequency."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"filter/state"}),": Streams the filter state, which combines the robot's pose, orientation,\nfilter state uncertainties, and filter convergence status.\nThis topic is essential for understanding the robot's current state and its accuracy."]}),"\n"]}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.p,{children:"These topics ensure that users have a comprehensive set of data streams to choose from,\ndepending on their specific needs and analysis requirements."}),"\n",(0,n.jsx)(r.h2,{id:"recording-profile",children:"Recording Profile"}),"\n",(0,n.jsx)(r.p,{children:'To initiate recording, a "Recording profile" must be provided as an argument.\nThis profile is a JSON file detailing the subscriptions or topics to be recorded. Here\'s an example:'}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-json",children:'{\n    "config": {\n        "name": "record_default",\n        "subscriptions": [\n            {\n            "uri": {\n                "path": "*",\n                "query": "service_name=canbus"\n            },\n            "every_n": 1\n            },\n            {\n            "uri": {\n                "path": "*",\n                "query": "service_name=gps"\n            },\n            "every_n": 1\n            },\n            {\n            "uri": {\n                "path": "/imu",\n                "query": "service_name=oak0"\n            },\n            "every_n": 1\n            },\n            {\n            "uri": {\n                "path": "*",\n                "query": "service_name=filter"\n            },\n            "every_n": 1\n            }\n        ]\n    }\n}\n'})}),"\n",(0,n.jsx)(r.admonition,{title:"INFO",type:"info",children:(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"*"})})," symbol in the ",(0,n.jsx)(r.code,{children:"path"})," field indicates that all available topics of that specific\nsubscription (service) should be recorded."]})}),"\n",(0,n.jsx)(r.h2,{id:"api",children:"API"}),"\n",(0,n.jsx)(r.p,{children:"Users can interact with the Recorder Service using the following commands:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"/start"}),': Initiates data recording.\nA valid "Recording profile" must be provided as an argument.']}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"/stop"}),": Halts the data recording process."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"data-storage",children:"Data Storage"}),"\n",(0,n.jsx)(r.p,{children:"All recorded data is saved as binary files on the disk at /mnt/data.\nThe naming convention for these files captures the precise timestamp (to the microsecond)\nat the recording's start, the robot's name, and the file number in the sequence:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"<yyyy>_<mm>_<dd>_<hh>_<mn>_<ss>_<msmsms>_<robot_name>.0000.bin\n"})}),"\n",(0,n.jsx)(r.p,{children:"For example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"2023_01_12_16_17_52_134845_element-vegetable.0000.bin\n"})}),"\n",(0,n.jsx)(r.h2,{id:"how-to-use",children:"How to Use"}),"\n",(0,n.jsxs)(r.p,{children:["Data can be recorded through the Recorder App, or using the ",(0,n.jsx)(r.code,{children:"EventsClient"})," class."]}),"\n",(0,n.jsxs)(r.p,{children:["To record data through the UI on the Brain display, see the\n",(0,n.jsx)(r.a,{href:"/docs/apps/recorder_app/",children:"Recorder App Guide"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["To record data using the Recorder Service API from your own application, see the\n",(0,n.jsx)(r.a,{href:"/docs/examples/events_recorder/",children:"Events Recorder example"}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,r,i)=>{i.d(r,{Z:()=>c,a:()=>o});var n=i(7294);const s={},t=n.createContext(s);function o(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);