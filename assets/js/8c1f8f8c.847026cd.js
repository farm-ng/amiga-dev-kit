"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8950],{6049:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(7462),s=(a(7294),a(3905));a(1839);const r={id:"camera-settings",title:"Camera Settings"},i=void 0,o={unversionedId:"examples/camera_settings/camera-settings",id:"examples/camera_settings/camera-settings",title:"Camera Settings",description:"Camera Settings",source:"@site/docs/examples/camera_settings/README.md",sourceDirName:"examples/camera_settings",slug:"/examples/camera_settings/",permalink:"/docs/examples/camera_settings/",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/camera_settings/README.md",tags:[],version:"current",frontMatter:{id:"camera-settings",title:"Camera Settings"},sidebar:"examples",previous:{title:"Camera Pointcloud",permalink:"/docs/examples/camera_pointcloud/"},next:{title:"Follow a track",permalink:"/docs/examples/controller_track/"}},m={},c=[{value:"Camera Settings",id:"camera-settings",level:2},{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:3},{value:"2. Setup",id:"2-setup",level:3},{value:"3. Install the example&#39;s dependencies",id:"3-install-the-examples-dependencies",level:3},{value:"4. Execute the Python script",id:"4-execute-the-python-script",level:3},{value:"5. Customize run",id:"5-customize-run",level:3},{value:"6. Code overview",id:"6-code-overview",level:3}],l={toc:c};function p(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"camera-settings"},"Camera Settings"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/camera_settings/main.py"},"This example"),"\noperates as a standalone Python script,\nin which an ",(0,s.kt)("inlineCode",{parentName:"p"},"EventClient")," to an Oak camera service running on an Amiga brain is created.\nThe settings of an Oak camera camera are set,\nand the returned result is printed in the terminal."),(0,s.kt)("p",null,"You can either run this example directly on a brain by ",(0,s.kt)("inlineCode",{parentName:"p"},"ssh"),"'ing in,\nor use your local PC.\nIf using your local PC, it should be either connected to the same local network as the brain\nor linked to it through tailscale."),(0,s.kt)("p",null,"Ensure that a ",(0,s.kt)("a",{parentName:"p",href:"/docs/brain/"},(0,s.kt)("strong",{parentName:"a"},"farm-ng brain"))," running Oak cameras is active."),(0,s.kt)("h3",{id:"1-install-the-farm-ng-brain-adk-package"},"1. Install the ",(0,s.kt)("a",{parentName:"h3",href:"/docs/brain/brain-install"},"farm-ng Brain ADK package")),(0,s.kt)("h3",{id:"2-setup"},"2. Setup"),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment.")),(0,s.kt)("p",null,"Create first a virtual environment"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv venv\nsource venv/bin/activate\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/camera_settings\n")),(0,s.kt)("h3",{id:"3-install-the-examples-dependencies"},"3. Install the example's dependencies"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -r requirements.txt\n")),(0,s.kt)("h3",{id:"4-execute-the-python-script"},"4. Execute the Python script"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"python3 main.py --service-config service_config.json --camera-settings camera_settings.json\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"By default, the camera ",(0,s.kt)("inlineCode",{parentName:"p"},"host")," is assumed to be ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost")," (service_config.json).\nIf running the example from your local PC, you should replace ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost")," with\nyour brain's IP address (e.g., 100.67.32.5) or your Amiga's name\n(e.g., ",(0,s.kt)("inlineCode",{parentName:"p"},"element-vegetable")," - only supported if connected via tailscale).")),(0,s.kt)("h3",{id:"5-customize-run"},"5. Customize run"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# usage: amiga-camera-settings [-h] --service-config SERVICE_CONFIG\n#                              [--camera-settings CAMERA_SETTINGS] [--stream-name {rgb,mono}]\n#\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --service-config SERVICE_CONFIG\n#                         The camera service config.\n#   --camera-settings CAMERA_SETTINGS\n#                         The camera control settings.\n#   --stream-name {rgb,mono}\n#                         The stream name to set the settings for.\n")),(0,s.kt)("h3",{id:"6-code-overview"},"6. Code overview"),(0,s.kt)("p",null,"In this example we use the ",(0,s.kt)("inlineCode",{parentName:"p"},"EventClient")," with the ",(0,s.kt)("inlineCode",{parentName:"p"},"request_reply")," method to receive and\nset the camera settings. The ",(0,s.kt)("inlineCode",{parentName:"p"},"request_reply")," method is a coroutine that returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," object.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," object is used to retrieve the result of the request."),(0,s.kt)("p",null,"To get the settings, the path to the camera service is\n",(0,s.kt)("inlineCode",{parentName:"p"},"/camera_settings/<stream_name>")," and the request message is ",(0,s.kt)("inlineCode",{parentName:"p"},"Empty"),".\nThe reply message is ",(0,s.kt)("inlineCode",{parentName:"p"},"oak_pb2.CameraSettings")," and contains the current camera settings."),(0,s.kt)("p",null,"To set the settings, the path to the camera service is ",(0,s.kt)("inlineCode",{parentName:"p"},"/camera_settings/<stream_name>"),"\nand the request message is ",(0,s.kt)("inlineCode",{parentName:"p"},"oak_pb2.CameraSettings"),"."),(0,s.kt)("p",null,"You can explore the files ",(0,s.kt)("inlineCode",{parentName:"p"},"service_config.json")," to customize the camera service configuration\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"camera_settings.json")," to customize the camera settings."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'async def main(service_config_path: Path, settings_config_path: Path, stream_name: str) -> None:\n    """Request the camera calibration from the camera service.\n\n    Args:\n        service_config_path (Path): The path to the camera service config.\n        settings_config_path (Path): The path to the camera settings config.\n        stream_name (str): The stream name to set the settings for.\n    """\n    # create a client to the camera service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    # create camera setting from the json file\n    camera_settings_request: oak_pb2.CameraSettings | Empty = Empty()\n    if settings_config_path:\n        camera_settings_request = proto_from_json_file(settings_config_path, oak_pb2.CameraSettings())\n\n    # send a request to the camera service\n    # the camera service will reply with the current camera settings\n    # available settings are:\n    #   - /camera_settings/rgb\n    #   - /camera_settings/mono\n    camera_settings: oak_pb2.CameraSettings = await EventClient(config).request_reply(\n        f"/camera_settings/{stream_name}", camera_settings_request, decode=True\n    )\n\n    print(camera_settings)\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-camera-settings")\n    parser.add_argument("--service-config", type=Path, required=True, help="The camera service config.")\n    parser.add_argument("--camera-settings", type=Path, required=False, help="The camera control settings.")\n    parser.add_argument(\n        "--stream-name",\n        type=str,\n        choices=["rgb", "mono"],\n        default="rgb",\n        help="The stream name to set the settings for.",\n    )\n    args = parser.parse_args()\n\n    asyncio.run(main(args.service_config, args.camera_settings, args.stream_name))\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"We highly recommend to have some basic knowledge about\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},(0,s.kt)("strong",{parentName:"a"},(0,s.kt)("inlineCode",{parentName:"strong"},"asyncio"))),".")))}p.isMDXComponent=!0}}]);