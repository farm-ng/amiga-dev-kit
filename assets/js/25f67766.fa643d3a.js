"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[2362],{3407:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=s(4848),r=s(8453);const t={id:"amiga-dev",title:"Amiga Development 101"},o=void 0,a={id:"concepts/system_overview/amiga-dev",title:"Amiga Development 101",description:"Welcome to the world of Amiga robot development!",source:"@site/docs/concepts/system_overview/README.md",sourceDirName:"concepts/system_overview",slug:"/concepts/system_overview/",permalink:"/docs/concepts/system_overview/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/concepts/system_overview/README.md",tags:[],version:"current",frontMatter:{id:"amiga-dev",title:"Amiga Development 101"},sidebar:"Developer",previous:{title:"Next Steps",permalink:"/docs/brain/next-steps"},next:{title:"Transforms & Poses",permalink:"/docs/concepts/transforms_and_poses/"}},c={},l=[{value:"What are Services?",id:"what-are-services",level:2},{value:"Why Are Services Necessary?",id:"why-are-services-necessary",level:2},{value:"The Amiga Service",id:"the-amiga-service",level:2},{value:"The Heartbeat of Amiga: Key Services",id:"the-heartbeat-of-amiga-key-services",level:2},{value:"How Do Services Talk to Each Other?",id:"how-do-services-talk-to-each-other",level:2},{value:"Architectural Diagram",id:"architectural-diagram",level:2},{value:"Open Source Code Examples",id:"open-source-code-examples",level:2},{value:"Where to Run the Examples",id:"where-to-run-the-examples",level:3},{value:"Running Examples on Your Local Machine",id:"running-examples-on-your-local-machine",level:4},{value:"Running Examples Directly on the Amiga&#39;s Brain",id:"running-examples-directly-on-the-amigas-brain",level:4}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Welcome to the world of Amiga robot development!\nIf you're excited about harnessing the power of the Brain and the Amiga platform,\nyou've come to the right place.\nThis guide is designed to give you a bird's-eye view of how various services run on the Brain\nwork in harmony to power the Amiga."}),"\n",(0,i.jsx)(n.h2,{id:"what-are-services",children:"What are Services?"}),"\n",(0,i.jsx)(n.p,{children:"In the realm of robot development, a service can be thought of as a specialized program or\nroutine that performs a specific function.\nFor the Amiga robot, each service handles a unique aspect of the robot's operation, from processing\nimagery to managing movement.\nThey're the cogs that make the Amiga machine tick."}),"\n",(0,i.jsx)(n.h2,{id:"why-are-services-necessary",children:"Why Are Services Necessary?"}),"\n",(0,i.jsx)(n.p,{children:"Services modularize robot functions.\nInstead of having one colossal program trying to manage everything the robot does,\nwe break down tasks into individual services.\nThis approach has several advantages:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": As the robot's capabilities grow, new services can be added without\ndisturbing existing ones."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintainability"}),": If there's a bug or an issue, it's isolated to a particular service,\nmaking troubleshooting easier."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficiency"}),": Services can run concurrently, utilizing the multi-core capabilities of\nplatforms like the Brain."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-amiga-service",children:"The Amiga Service"}),"\n",(0,i.jsx)(n.p,{children:"The Amiga service serves as the central hub for coordinating several critical sub-services.\nThink of it as the command center from which various specialized functions are controlled:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/oak_service/",children:(0,i.jsx)(n.strong,{children:"Oak"})}),": Handles imagery and provides IMU data, crucial for\nnavigation and stability."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/gps_service/",children:(0,i.jsx)(n.strong,{children:"GPS"})}),": Manages the global positioning system to track the robot's\nlocation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/recorder_service/",children:(0,i.jsx)(n.strong,{children:"Recorder"})}),": Logs data for analysis."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These sub-services are now components of the larger Amiga service, allowing for streamlined operations\nand more efficient management of resources."}),"\n",(0,i.jsx)(n.h2,{id:"the-heartbeat-of-amiga-key-services",children:"The Heartbeat of Amiga: Key Services"}),"\n",(0,i.jsx)(n.p,{children:"Here is how our services are structured under the Amiga service:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/system_overview/#the-amiga-service",children:(0,i.jsx)(n.strong,{children:"Amiga"})}),": Acts as the central command.\nUnder this service, we have:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"OAK"}),"\n",(0,i.jsx)(n.li,{children:"GPS"}),"\n",(0,i.jsx)(n.li,{children:"Recorder"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/canbus_service/",children:(0,i.jsx)(n.strong,{children:"Canbus"})}),": Manages the robot's motors.\nIt's like the nervous system, transmitting movement commands and receiving feedback."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/filter_service/",children:(0,i.jsx)(n.strong,{children:"Filter (UKF)"})}),": Acts as the robot's sense of self-awareness.\nBy using IMU data from the OAK service, wheel odometry from CANBUS, and global positioning from GPS,\nit estimates the state of the robot."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/track_follower_service/",children:(0,i.jsx)(n.strong,{children:"Track Follower"})}),": The brain of the operation.\nIt uses algorithms like pure pursuit and PID to guide the Amiga.\nIt makes decisions based on data from other services."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-do-services-talk-to-each-other",children:"How Do Services Talk to Each Other?"}),"\n",(0,i.jsx)(n.p,{children:"Imagine a bustling city where everyone has a job. The mail carrier brings letters (data),\nthe traffic cop (Track Follower) guides vehicles (services),\nand everyone communicates to ensure the city runs smoothly.\nSimilarly, in the Amiga ecosystem:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.strong,{children:"OAK"})," sub-service streams visual and IMU data."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.strong,{children:"Filter"})," service uses IMU data from OAK, wheel odometry from CANBUS, and global positioning\ndata from GPS to understand how the robot is moving."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.strong,{children:"Track Follower"})," takes this movement data, combines it with its algorithms, and decides\nthe best way to move the robot."]}),"\n",(0,i.jsxs)(n.li,{children:["This decision is then passed to ",(0,i.jsx)(n.strong,{children:"CANBUS"}),", which communicates with the robot's motors to\nexecute the movement."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"All these services run on the powerful Brain, allowing for efficient and concurrent operations."}),"\n",(0,i.jsx)(n.h2,{id:"architectural-diagram",children:"Architectural Diagram"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the architectural diagram that visually represents how these services interact:\n",(0,i.jsx)(n.img,{src:"https://github.com/farm-ng/amiga-dev-kit/assets/39603677/68bff7a0-08df-48d2-b6ae-5155cf7ff1eb",alt:"amiga-services-diagram"})]}),"\n",(0,i.jsx)(n.p,{children:"This introduction is designed to be a primer.\nEach service has its depths and intricacies, which you'll uncover as you dive deeper into Amiga development.\nEnjoy the journey!"}),"\n",(0,i.jsx)(n.h2,{id:"open-source-code-examples",children:"Open Source Code Examples"}),"\n",(0,i.jsx)(n.p,{children:"Diving into Amiga robot development is made significantly easier with our collection of over\n30 open source Python code examples.\nThese examples are meticulously designed to cater to a wide range of skill levels, from beginners\nto advanced developers, ensuring that everyone can find a suitable starting point for their journey.\nBy exploring these examples, you'll gain hands-on experience with our API, learning how to effectively\ncommunicate with and leverage the robot's diverse sensors."}),"\n",(0,i.jsx)(n.h3,{id:"where-to-run-the-examples",children:"Where to Run the Examples"}),"\n",(0,i.jsx)(n.p,{children:"Every code example comes with detailed instructions on how to run it, tailored to the specifics of\nthe example.\nA key feature of our development environment is its flexibility; examples can be executed on your\nlocal machine as well as directly on the Amiga's brain.\nThis adaptability is essential for developers who wish to work within their own environments or\nneed to manage operations across multiple robots."}),"\n",(0,i.jsx)(n.h4,{id:"running-examples-on-your-local-machine",children:"Running Examples on Your Local Machine"}),"\n",(0,i.jsxs)(n.p,{children:["To run examples on your local PC you need to either be connected to the same Wifi network of your Amiga\nor set up ",(0,i.jsx)(n.a,{href:"/docs/ssh/#recommended-configure-cross-network-access",children:(0,i.jsx)(n.strong,{children:"Tailscale"})}),"\nfor cross-network access."]}),"\n",(0,i.jsxs)(n.p,{children:["For either case, you must modify the ",(0,i.jsx)(n.code,{children:"host"})," field on the ",(0,i.jsx)(n.code,{children:"service_config.json"})," file (or its equivalent)."]}),"\n",(0,i.jsxs)(n.p,{children:["If you're on the same Wifi network of your Amiga, you can change the ",(0,i.jsx)(n.code,{children:"host"})," field from ",(0,i.jsx)(n.code,{children:"localhost"})," to\nyour Amiga's local IP address (e.g., 192.168.1.29).\nMake sure to check your Amiga's local IP address on the \"Wifi\" menu on the brain."]}),"\n",(0,i.jsxs)(n.p,{children:["On the other hand, if you're on a different Wifi network, the ",(0,i.jsx)(n.code,{children:"host"})," field should be changed from\n",(0,i.jsx)(n.code,{children:"localhost"})," to your robot's unique tailscale name (e.g., ",(0,i.jsx)(n.code,{children:"element-vegetable.tail0be07.ts.net"}),").\nThis ensures that your gRPC client can successfully connect to the robot, facilitating seamless\ninteraction and data exchange."]}),"\n",(0,i.jsxs)(n.p,{children:["Notice how we change the ",(0,i.jsx)(n.code,{children:"host"})," field here from ",(0,i.jsx)(n.code,{children:"localhost"})," to ",(0,i.jsx)(n.code,{children:"element-vegetable.tail0be07.ts.net"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "name": "filter",\n    "port": 20001,\n    "host": "element-vegetable.tail0be07.ts.net",\n    "log_level": "INFO",\n    "subscriptions": [\n        {\n            "uri": {\n                "path": "/state",\n                "query": "service_name=filter"\n            },\n            "every_n": 1\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"running-examples-directly-on-the-amigas-brain",children:"Running Examples Directly on the Amiga's Brain"}),"\n",(0,i.jsxs)(n.p,{children:["Most examples are also designed to run directly on the Amiga's brain, offering a straightforward\napproach for developers working closely with the robot.\nFor these instances, the ",(0,i.jsx)(n.code,{children:"host"})," field in the ",(0,i.jsx)(n.code,{children:"service_config.json"})," file should remain as ",(0,i.jsx)(n.code,{children:"localhost"}),'.\nIt\'s important to note that examples requiring a user interface, such as the "track_plotter" example,\ncannot be run on the brain due to its headless nature.\nThese exceptions are clearly stated; unless otherwise mentioned, you can assume that an example is\ncompatible with both local PC and the brain execution.']})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);