"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4857],{854:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var n=t(7462),r=(t(7294),t(3905));t(1839);const l={sidebar_label:"camera_client",title:"oak.camera_client"},i=void 0,c={unversionedId:"reference/brain/oak/camera_client",id:"reference/brain/oak/camera_client",title:"oak.camera_client",description:"RateLimiter Objects",source:"@site/docs/reference/brain/oak/camera_client.md",sourceDirName:"reference/brain/oak",slug:"/reference/brain/oak/camera_client",permalink:"/docs/reference/brain/oak/camera_client",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/brain/oak/camera_client.md",tags:[],version:"current",frontMatter:{sidebar_label:"camera_client",title:"oak.camera_client"}},o={},s=[{value:"RateLimiter Objects",id:"ratelimiter-objects",level:2},{value:"__call__",id:"__call__",level:4},{value:"OakCameraClient Objects",id:"oakcameraclient-objects",level:2},{value:"get_calibration",id:"get_calibration",level:4},{value:"stream_frames",id:"stream_frames",level:4}],m={toc:s};function p(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"ratelimiter-objects"},"RateLimiter Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class RateLimiter()\n")),(0,r.kt)("h4",{id:"__call__"},"_","_","call","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __call__(func)\n")),(0,r.kt)("p",null,"Return a wrapped function that can only be called once per frequency where the most recent call will be\nexecuted."),(0,r.kt)("h2",{id:"oakcameraclient-objects"},"OakCameraClient Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class OakCameraClient(ServiceClient)\n")),(0,r.kt)("p",null,"Oak-D camera client."),(0,r.kt)("p",null,"Client class to connect with the Amiga brain camera services.\nInherits from ServiceClient."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config")," ",(0,r.kt)("em",{parentName:"li"},"ClientConfig")," - the grpc configuration data structure.")),(0,r.kt)("h4",{id:"get_calibration"},"get","_","calibration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"async def get_calibration() -> oak_pb2.GetCalibrationReply\n")),(0,r.kt)("p",null,"Return the oak calibration as oak_pb2.GetCalibrationReply."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"request")," - proto defined request for oak calibration (oak_pb2.GetCalibrationRequest)")),(0,r.kt)("h4",{id:"stream_frames"},"stream","_","frames"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def stream_frames(every_n: int)\n")),(0,r.kt)("p",null,"Return the async streaming object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"every_n")," - the streaming frequency. In practice, drops ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," frames.")))}p.isMDXComponent=!0}}]);