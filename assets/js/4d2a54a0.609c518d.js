"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4812],{8811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));n(1839);const o={id:"template-overview",title:"Template Overview"},l="Template Overview",r={unversionedId:"examples/virtual_joystick/template-overview",id:"examples/virtual_joystick/template-overview",title:"Template Overview",description:"Template overview",source:"@site/docs/examples/virtual_joystick/02_template_overview.md",sourceDirName:"examples/virtual_joystick",slug:"/examples/virtual_joystick/template-overview",permalink:"/docs/examples/virtual_joystick/template-overview",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/virtual_joystick/02_template_overview.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"template-overview",title:"Template Overview"},sidebar:"examples",previous:{title:"Template Starter",permalink:"/docs/examples/virtual_joystick/template-starter"},next:{title:"Canbus Stream",permalink:"/docs/examples/virtual_joystick/canbus-stream"}},p={},s=[{value:"Template overview",id:"template-overview-1",level:3},{value:"Imports",id:"imports",level:4},{value:"kivy app definition",id:"kivy-app-definition",level:4},{value:"RelativeLayout",id:"relativelayout",level:4},{value:"Back button",id:"back-button",level:4},{value:"TemplateApp",id:"templateapp",level:4},{value:"build",id:"build",level:4},{value:"touch handling",id:"touch-handling",level:5},{value:"on_exit_button",id:"on_exit_button",level:4},{value:"app_func",id:"app_func",level:4},{value:"template_function",id:"template_function",level:4},{value:"Command line args and execution",id:"command-line-args-and-execution",level:4}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"template-overview"},"Template Overview"),(0,i.kt)("h3",{id:"template-overview-1"},"Template overview"),(0,i.kt)("p",null,"This section explains all of the Python code in the template, so you can understand the base before adding anything."),(0,i.kt)("h4",{id:"imports"},"Imports"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'# Copyright (c) farm-ng, inc. Amiga Development Kit License, Version 0.1\nimport argparse\nimport asyncio\nimport os\nfrom typing import List\n\n# Must come before kivy imports\nos.environ["KIVY_NO_ARGS"] = "1"\n\nfrom kivy.config import Config  # noreorder # noqa: E402\n\nConfig.set("graphics", "resizable", False)\nConfig.set("graphics", "width", "1280")\nConfig.set("graphics", "height", "800")\nConfig.set("graphics", "fullscreen", "false")\nConfig.set("input", "mouse", "mouse,disable_on_activity")\nConfig.set("kivy", "keyboard_mode", "systemanddock")\n\nfrom kivy.input.providers.mouse import MouseMotionEvent  # noqa: E402\nfrom kivy.app import App  # noqa: E402\nfrom kivy.lang.builder import Builder  # noqa: E402\nfrom kivy.core.window import Window  # noqa: E402\n')),(0,i.kt)("p",null,"The template starts with generic Python imports that are used in the app, followed by the basic kivy imports and configuration.\nBefore any kivy imports, we must explicitly state that the command line args for the app are to be used, rather than the default kivy command line args, with ",(0,i.kt)("inlineCode",{parentName:"p"},'os.environ["KIVY_NO_ARGS"] = "1"'),"."),(0,i.kt)("p",null,"Next we import kivy ",(0,i.kt)("inlineCode",{parentName:"p"},"Config")," and define the config parameters we recommend for running kivy applications on the brain.\nThis should come before importing any other Kivy modules, as stated in ",(0,i.kt)("a",{parentName:"p",href:"https://kivy.org/doc/stable/api-kivy.config.html"},"kivy - Configuration object"),"."),(0,i.kt)("p",null,"Finally we import the remaining kivy modules we use in our app, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"# noqa: E402")," flag, so any ",(0,i.kt)("inlineCode",{parentName:"p"},"pre-commit")," formatters don't move these imports above the kivy configuration setting."),(0,i.kt)("h4",{id:"kivy-app-definition"},"kivy app definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'kv = """\nRelativeLayout:\n    Button:\n        id: back_btn_layout\n        pos_hint: {"x": 0.0, "top": 1.0}\n        background_color: 0, 0, 0, 0\n        size_hint: 0.1, 0.1\n        background_normal: "assets/back_button.png"\n        on_release: app.on_exit_btn()\n        Image:\n            source: "assets/back_button_normal.png" \\\n            if self.parent.state == "normal" \\\n            else "assets/back_button_down.png"\n            pos: self.parent.pos\n            size: self.parent.size\n"""\n')),(0,i.kt)("p",null,"Next we define our application in the Kv language.\nThis definition can be a string at the top of a ",(0,i.kt)("inlineCode",{parentName:"p"},".py")," file or can be defined\nin a separate ",(0,i.kt)("inlineCode",{parentName:"p"},".kv")," file, and we tend to go for strings at the top of the Python file."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Throughout this tutorial we'll explain the kivy app created in this example, but this is not intended as a thorough introduction to using kivy. Try the ",(0,i.kt)("a",{parentName:"p",href:"https://kivy.org/doc/stable/tutorials-index.html"},"kivy tutorials")," and use the ",(0,i.kt)("a",{parentName:"p",href:"https://kivy.org/doc/stable/api-index.html"},"kivy API")," for more information on creating custom applications with kivy.")),(0,i.kt)("h4",{id:"relativelayout"},"RelativeLayout"),(0,i.kt)("p",null,"Two key components of kivy are ",(0,i.kt)("a",{parentName:"p",href:"https://kivy.org/doc/stable/gettingstarted/layouts.html#"},(0,i.kt)("inlineCode",{parentName:"a"},"Layouts"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://kivy.org/doc/stable/api-kivy.uix.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Widgets")),".\nThe root of our template app is a ",(0,i.kt)("inlineCode",{parentName:"p"},"RelativeLayout"),", which contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," widget.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"RelativeLayout")," allows us to position the ",(0,i.kt)("a",{parentName:"p",href:"#back-button"},"Back button")," (and any widgets or nested layouts we may add in the future) in relative coordinates."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reference: ",(0,i.kt)("a",{parentName:"li",href:"https://kivy.org/doc/stable/api-kivy.uix.relativelayout.html"},"Relative Layout"))),(0,i.kt)("h4",{id:"back-button"},"Back button"),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," is used to exit the app when it is pressed, by calling the ",(0,i.kt)("a",{parentName:"p",href:"#on_exit_button"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateApp.on_exit_btn()"))," method."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To be precise it's actually when the button is released due to using the ",(0,i.kt)("inlineCode",{parentName:"p"},"on_release:")," keyword.")),(0,i.kt)("p",null,"Since the ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateApp")," inherits from the kivy ",(0,i.kt)("inlineCode",{parentName:"p"},"App")," class, methods and variables of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateApp")," can be linked with the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.foo_variable")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"app.bar_method()"),"\nWe define the ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," with two images, one that shows most of the time, and another that shows while the button is pressed down.\nYou can also define a button with a string, if you want to quickly add buttons without finding an icon."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/google/material-design-icons"},"Material Icons")," is a nice place to find symbols to use for app buttons / UI features.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reference: ",(0,i.kt)("a",{parentName:"li",href:"https://kivy.org/doc/stable/api-kivy.uix.button.html"},"Button"))),(0,i.kt)("h4",{id:"templateapp"},"TemplateApp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},"class TemplateApp(App):\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.async_tasks: List[asyncio.Task] = []\n")),(0,i.kt)("p",null,"We define the ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateApp")," to inherit from the kivy ",(0,i.kt)("inlineCode",{parentName:"p"},"App")," class, so it has all the features of a generic ",(0,i.kt)("inlineCode",{parentName:"p"},"App"),", plus anything we add to it."),(0,i.kt)("p",null,"All we add here is a placeholder for the ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateApp")," class methods that will each be added as an ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio.Task"),"."),(0,i.kt)("h4",{id:"build"},"build"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'def build(self):\n    def on_touch_down(window: Window, touch: MouseMotionEvent) -> bool:\n        """Handles initial press with mouse click or touchscreen."""\n        if isinstance(touch, MouseMotionEvent) and int(\n            os.environ.get("DISABLE_KIVY_MOUSE_EVENTS", 0)\n        ):\n            return True\n        for w in window.children[:]:\n            if w.dispatch("on_touch_down", touch):\n                return True\n\n        # Add additional on_touch_down behavior here\n\n        return False\n\n    def on_touch_move(window: Window, touch: MouseMotionEvent) -> bool:\n        """Handles when press is held and dragged with mouse click or touchscreen."""\n        if isinstance(touch, MouseMotionEvent) and int(\n            os.environ.get("DISABLE_KIVY_MOUSE_EVENTS", 0)\n        ):\n            return True\n        for w in window.children[:]:\n            if w.dispatch("on_touch_move", touch):\n                return True\n\n        # Add additional on_touch_move behavior here\n\n        return False\n\n    def on_touch_up(window: Window, touch: MouseMotionEvent) -> bool:\n        """Handles release of press with mouse click or touchscreen."""\n        if isinstance(touch, MouseMotionEvent) and int(\n            os.environ.get("DISABLE_KIVY_MOUSE_EVENTS", 0)\n        ):\n            return True\n        for w in window.children[:]:\n            if w.dispatch("on_touch_up", touch):\n                return True\n\n        # Add additional on_touch_up behavior here\n\n        return False\n\n    Window.bind(on_touch_down=on_touch_down)\n    Window.bind(on_touch_move=on_touch_move)\n    Window.bind(on_touch_up=on_touch_up)\n\n    return Builder.load_string(kv)\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"build")," is a default kivy ",(0,i.kt)("inlineCode",{parentName:"p"},"App")," method that we must overwrite with our app's details."),(0,i.kt)("p",null,"To load the Kv formatted string into our app, we use the built-in method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},"Builder.load_string(KV_STRING)\n")),(0,i.kt)("p",null,"But first, we need to override the default touch handling since we are interacting on a touchscreen."),(0,i.kt)("h5",{id:"touch-handling"},"touch handling"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"on_touch_down"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"on_touch_move"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"on_touch_up")," define the behavior at various stages of a screen press or mouse click.\nBecause kivy can mis-register touches on the touchscreen, you will notice the clear pattern that all of these follow to correct for this.\nThere is a placeholder after the initial pattern in all of these that allows you to add logic to be performed at these various stages of the press."),(0,i.kt)("p",null,"We also must bind these touch handling functions to the kivy app ",(0,i.kt)("inlineCode",{parentName:"p"},"Window"),"."),(0,i.kt)("admonition",{title:"Note",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In the future we plan to hide this so it is not needed in your apps.")),(0,i.kt)("h4",{id:"on_exit_button"},"on_exit_button"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'def on_exit_btn(self) -> None:\n    """Kills the running kivy application."""\n    App.get_running_app().stop()\n')),(0,i.kt)("p",null,"This simple method stops the running kivy app.\nWhen an app was launched on the Amiga Brain through the Launcher app, this will return the Brain state to the Launcher app."),(0,i.kt)("h4",{id:"app_func"},"app_func"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},"async def app_func(self):\n    async def run_wrapper() -> None:\n        # we don't actually need to set asyncio as the lib because it is\n        # the default, but it doesn't hurt to be explicit\n        await self.async_run(async_lib=\"asyncio\")\n        for task in self.async_tasks:\n            task.cancel()\n\n    # Placeholder task\n    self.async_tasks.append(asyncio.ensure_future(self.template_function()))\n\n    return await asyncio.gather(run_wrapper(), *self.async_tasks)\n")),(0,i.kt)("p",null,"We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"app_func")," pattern, with the nested ",(0,i.kt)("inlineCode",{parentName:"p"},"run_wrapper"),", to build, run, and manage the list of long duration, asynchronous tasks required by the app."),(0,i.kt)("p",null,"Here we build the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," methods that will run simultaneously for the life of our app.\nCurrently this list only consists of a placeholder method called ",(0,i.kt)("a",{parentName:"p",href:"#template_function"},(0,i.kt)("inlineCode",{parentName:"a"},"template_function()"))," that we will later replace with tasks that actually do something."),(0,i.kt)("p",null,"Each method is added as an ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio.Task")," following the pattern used to add ",(0,i.kt)("inlineCode",{parentName:"p"},"self.template_function()"),"."),(0,i.kt)("h4",{id:"template_function"},"template_function"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'async def template_function(self) -> None:\n    """Placeholder forever loop."""\n    while self.root is None:\n        await asyncio.sleep(0.01)\n\n    while True:\n        await asyncio.sleep(0.01)\n')),(0,i.kt)("p",null,"In each of our ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," functions, we should wait for the root of the kivy App to be initialized before doing anything in the function.\nOften these functions will rely on the kivy app, so this prevents unexpected crashes."),(0,i.kt)("p",null,"In this placeholder, the ",(0,i.kt)("inlineCode",{parentName:"p"},"while")," loop doesn't do anything besides sleep for 10 ms before the next iteration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"while")," loop.\nWe tend to add this 10 ms at the end of each of our loops."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The custom defined async functions must be defined with the ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," decorator and any blocking tasks with the ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," keyword.")),(0,i.kt)("h4",{id:"command-line-args-and-execution"},"Command line args and execution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'if __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="template-app")\n\n    # Add additional command line arguments here\n\n    args = parser.parse_args()\n\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_until_complete(TemplateApp().app_func())\n    except asyncio.CancelledError:\n        pass\n    loop.close()\n')),(0,i.kt)("p",null,"Finally we run the app!\nThere is infrastructure in place for defining command line args, which you'll likely want in your apps so you don't have to hard code configurations.\nThe last six lines are a useful pattern for cleanly running your app with ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio"),"."))}u.isMDXComponent=!0}}]);