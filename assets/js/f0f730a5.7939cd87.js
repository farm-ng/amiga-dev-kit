"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5586],{3678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var a=n(7462),s=(n(7294),n(3905));n(1839);const c={sidebar_label:"canbus_client",title:"canbus.canbus_client"},r=void 0,i={unversionedId:"reference/brain/canbus/canbus_client",id:"reference/brain/canbus/canbus_client",title:"canbus.canbus_client",description:"CanbusClientConfig Objects",source:"@site/docs/reference/brain/canbus/canbus_client.md",sourceDirName:"reference/brain/canbus",slug:"/reference/brain/canbus/canbus_client",permalink:"/docs/reference/brain/canbus/canbus_client",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/brain/canbus/canbus_client.md",tags:[],version:"current",frontMatter:{sidebar_label:"canbus_client",title:"canbus.canbus_client"},sidebar:"api",previous:{title:"version",permalink:"/docs/reference/circuitpy/utils/version"},next:{title:"packet",permalink:"/docs/reference/brain/canbus/packet"}},l={},u=[{value:"CanbusClientConfig Objects",id:"canbusclientconfig-objects",level:2},{value:"CanbusServiceState Objects",id:"canbusservicestate-objects",level:2},{value:"CanbusClient Objects",id:"canbusclient-objects",level:2},{value:"server_address",id:"server_address",level:4},{value:"connect_to_service",id:"connect_to_service",level:4},{value:"pause_service",id:"pause_service",level:4}],o={toc:u};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"canbusclientconfig-objects"},"CanbusClientConfig Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass CanbusClientConfig()\n")),(0,s.kt)("p",null,"Canbus client configuration."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"port")," ",(0,s.kt)("em",{parentName:"li"},"int")," - the port to connect to the server."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"address")," ",(0,s.kt)("em",{parentName:"li"},"str")," - the address to connect to the server.")),(0,s.kt)("h2",{id:"canbusservicestate-objects"},"CanbusServiceState Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class CanbusServiceState()\n")),(0,s.kt)("p",null,"Canbus service state."),(0,s.kt)("h2",{id:"canbusclient-objects"},"CanbusClient Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class CanbusClient()\n")),(0,s.kt)("h4",{id:"server_address"},"server","_","address"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef server_address() -> str\n")),(0,s.kt)("p",null,"Returns the composed address and port."),(0,s.kt)("h4",{id:"connect_to_service"},"connect","_","to","_","service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"async def connect_to_service() -> None\n")),(0,s.kt)("p",null,"Starts the canbus streaming."),(0,s.kt)("p",null,"The service state will go to ",(0,s.kt)("inlineCode",{parentName:"p"},"RUNNING"),"."),(0,s.kt)("h4",{id:"pause_service"},"pause","_","service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"async def pause_service() -> None\n")),(0,s.kt)("p",null,"Pauses the canbus streaming."),(0,s.kt)("p",null,"The service state will go from ",(0,s.kt)("inlineCode",{parentName:"p"},"RUNNING")," to ",(0,s.kt)("inlineCode",{parentName:"p"},"IDLE"),"."))}p.isMDXComponent=!0}}]);