"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[1077],{6614:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var t=r(5893),s=r(1151);const i={id:"service-client",title:"Service Client"},c=void 0,o={id:"examples/service_client/service-client",title:"Service Client",description:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:",source:"@site/docs/examples/service_client/README.md",sourceDirName:"examples/service_client",slug:"/examples/service_client/",permalink:"/docs/examples/service_client/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/service_client/README.md",tags:[],version:"current",frontMatter:{id:"service-client",title:"Service Client"},sidebar:"examples",previous:{title:"Multi Client GeoImage",permalink:"/docs/examples/multi_client_geoimage/"},next:{title:"Service Counter",permalink:"/docs/examples/service_counter/"}},l={},a=[{value:"Requirements",id:"requirements",level:3},{value:"Define your protobuf messages",id:"define-your-protobuf-messages",level:3},{value:"Create your own service",id:"create-your-own-service",level:3},{value:"Create the client",id:"create-the-client",level:3},{value:"Run the example",id:"run-the-example",level:2},{value:"1. Run the service",id:"1-run-the-service",level:3},{value:"2. Run the client",id:"2-run-the-client",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{title:"Basic Knowledge Requirements",type:"info",children:[(0,t.jsx)(n.p,{children:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python Programming"}),": It's important to have a good grasp of Python, especially with concepts\nlike ",(0,t.jsx)(n.code,{children:"functions"}),", ",(0,t.jsx)(n.code,{children:"loops"}),", and ",(0,t.jsx)(n.code,{children:"classes"}),", since the example utilizes these fundamentals."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Asynchronous Programming with asyncio"}),": Familiarity with Python's asyncio for writing concurrent\ncode using the ",(0,t.jsx)(n.code,{children:"async/await"})," syntax."]}),"\n"]})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/tree/main-v2/py/examples/service_client",children:(0,t.jsx)(n.strong,{children:"Service Client"})}),"\nexample is the hello world of the farm-ng-core Event Service framework."]}),"\n",(0,t.jsxs)(n.p,{children:["The Event Service is a publish-subscribe service that allows to stream\ndata from the farm-ng-core services to its respective clients. The central piece\nof the Event Service is the ",(0,t.jsx)(n.code,{children:"EventServiceGrpc"})," service that is the main\nclass encapsulating the gRPC server."]}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, we will explain how to define your own service\nand how to use the ",(0,t.jsx)(n.code,{children:"EventClient"})," to subscribe to the service.\nYou will need a file to create the ",(0,t.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/service_client/service.py",children:"service"}),"\nand another one to create the ",(0,t.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main-v2/py/examples/service_client/client.py",children:"client"})]}),"\n",(0,t.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsx)(n.p,{children:"This example only requires the farm-ng-core package."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip3 install farm-ng-core\n\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["We highly recommend to have some basic knowledge about\n",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio.html",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"asyncio"})})}),",\n",(0,t.jsx)(n.a,{href:"https://grpc.io/docs/what-is-grpc/introduction/",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"gRPC"})})}),",\nand ",(0,t.jsx)(n.a,{href:"https://developers.google.com/protocol-buffers/docs/pythontutorial",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"protobuf"})})}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"define-your-protobuf-messages",children:"Define your protobuf messages"}),"\n",(0,t.jsx)(n.p,{children:"The farm-ng-core Event Service uses protobuf messages and leverages\ngRPC to communicate between client and server. The first step is to\ndefine your own protobuf messages."}),"\n",(0,t.jsxs)(n.p,{children:["For this example, we provide the ",(0,t.jsx)(n.code,{children:"two_ints.proto"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\n// The request message containing the two integers.\nmessage AddTwoIntsRequest {\n    int32 a = 1;\n    int32 b = 2;\n}\n\n// The response message containing the sum.\nmessage AddTwoIntsResponse {\n    int32 sum = 1;\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We provide the generated Python code in the ",(0,t.jsx)(n.code,{children:"two_ints_pb2.py"})," file and\nits corresponding ",(0,t.jsx)(n.code,{children:"two_ints_pb2.pyi"})," file for type hinting. Optionally,\nyou can regenerate the Python code yourself using the ",(0,t.jsx)(n.code,{children:"genprotos.py"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"create-your-own-service",children:"Create your own service"}),"\n",(0,t.jsxs)(n.p,{children:["In order to create your own service, we will create an auxiliary class\nto encapsulate the ",(0,t.jsx)(n.code,{children:"EventServiceGrpc"})," class. This auxiliary class will\nbe called ",(0,t.jsx)(n.code,{children:"AddTwoIntsServer"})," and will easily allow us to define the\nservice."]}),"\n",(0,t.jsxs)(n.p,{children:["The class ",(0,t.jsx)(n.code,{children:"AddTwoIntsServer"})," will have a method called ",(0,t.jsx)(n.code,{children:"request_reply_handler"}),"\nthat will be called every time a request is received. The method\n",(0,t.jsx)(n.code,{children:"request_reply_handler"})," will receive two arguments: the ",(0,t.jsx)(n.code,{children:"Event"})," and the\nrequest message. The ",(0,t.jsx)(n.code,{children:"Event"})," contains the metadata of the request and\nthe request message contains the actual request message."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class AddTwoIntServer:\n    """A simple service that implements the AddTwoInts service."""\n\n    def __init__(self, event_service: EventServiceGrpc) -> None:\n        """Initialize the service.\n\n        Args:\n            event_service: The event service to use for communication.\n        """\n        self._event_service = event_service\n        self._event_service.add_request_reply_handler(self.request_reply_handler)\n\n    @property\n    def logger(self) -> logging.Logger:\n        """Return the logger for this service."""\n        return self._event_service.logger\n\n    async def request_reply_handler(self, event: Event, message: two_ints_pb2.AddTwoIntsRequest) -> Message:\n        """The callback for handling request/reply messages."""\n        if event.uri.path == "/sum":\n            self.logger.info(f"Requested to sum {message.a} + {message.b}")\n\n            return two_ints_pb2.AddTwoIntsResponse(sum=message.a + message.b)\n\n        return Empty()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To wrap up, we need to create a ",(0,t.jsx)(n.code,{children:"service.py"})," program that will instantiate\nthe ",(0,t.jsx)(n.code,{children:"EventServiceGrpc"})," and the ",(0,t.jsx)(n.code,{children:"AddTwoIntServer"})," and run the service leveraging\nthe ",(0,t.jsx)(n.code,{children:"serve"})," method with the ",(0,t.jsx)(n.code,{children:"asyncio"})," event loop."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="farm-ng-service")\n    parser.add_argument("--service-config", type=Path, required=True, help="The service config.")\n    args = parser.parse_args()\n\n    # load the service config\n    service_config: EventServiceConfig = proto_from_json_file(args.service_config, EventServiceConfig())\n\n    # create the grpc server\n    event_service: EventServiceGrpc = EventServiceGrpc(grpc.aio.server(), service_config)\n\n    loop = asyncio.get_event_loop()\n\n    try:\n        # wrap and run the service\n        loop.run_until_complete(AddTwoIntServer(event_service).serve())\n    except KeyboardInterrupt:\n        print("Exiting...")\n    finally:\n        loop.close()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, we provide a ",(0,t.jsx)(n.code,{children:"service_config.json"})," file that contains the\nconfiguration of the service. The ",(0,t.jsx)(n.code,{children:"service_config.json"})," file contains\nthe following fields:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "two_int",\n    "port": 5001,\n    "host": "localhost",\n    "log_level": "DEBUG"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"create-the-client",children:"Create the client"}),"\n",(0,t.jsxs)(n.p,{children:["The client is a simple Python script that will connect to the service\nand subscribe to the service. For the client, we will leverage the\n",(0,t.jsx)(n.code,{children:"EventClient"})," class that will allow us to interact with the service."]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we will create a ",(0,t.jsx)(n.code,{children:"client.py"})," program that will instantiate\nthe ",(0,t.jsx)(n.code,{children:"EventServiceConfig"})," and the ",(0,t.jsx)(n.code,{children:"EventClient"}),". The ",(0,t.jsx)(n.code,{children:"EventClient"})," will\nrequest the service to sum two integers implementing the ",(0,t.jsx)(n.code,{children:"request_reply"}),"\nmethod. The ",(0,t.jsx)(n.code,{children:"request_reply"})," method is a coroutine that triggers a the\n",(0,t.jsx)(n.code,{children:"request_reply_handler"})," method in the service and returns a ",(0,t.jsx)(n.code,{children:"Future"}),"\nobject. The ",(0,t.jsx)(n.code,{children:"Future"})," object is used to retrieve the result of the\nrequest."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def main() -> None:\n    parser = argparse.ArgumentParser(prog="farm-ng-client")\n    parser.add_argument("--service-config", type=Path, required=True, help="The service config.")\n    parser.add_argument("--a", type=int, required=True, help="The first integer.")\n    parser.add_argument("--b", type=int, required=True, help="The second integer.")\n    args = parser.parse_args()\n\n    # create a client to the camera service\n    config: EventServiceConfig = proto_from_json_file(args.service_config, EventServiceConfig())\n\n    # request the sum of two integers\n    result = await EventClient(config).request_reply("/sum", AddTwoIntsRequest(a=args.a, b=args.b), decode=True)\n\n    print(f"Result of {args.a} + {args.b} = {result.sum}")\n\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,t.jsx)(n.h2,{id:"run-the-example",children:"Run the example"}),"\n",(0,t.jsx)(n.h3,{id:"1-run-the-service",children:"1. Run the service"}),"\n",(0,t.jsx)(n.p,{children:"In a first terminal, run the service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python service.py --service-config config.json\n"})}),"\n",(0,t.jsx)(n.p,{children:"you should see the following output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Starting server on port 5001\nServer started\nSending /health: 0 to 0 clients\nSending /health: 1 to 0 clients\nSending /health: 2 to 0 clients\nSending /health: 3 to 0 clients\n...\n...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-run-the-client",children:"2. Run the client"}),"\n",(0,t.jsx)(n.p,{children:"In a second terminal, run the client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python client.py --service-config config.json --a 1 --b 2\n"})}),"\n",(0,t.jsx)(n.p,{children:"you should see the following output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Result of 1 + 2 = 3\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>c});var t=r(7294);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);