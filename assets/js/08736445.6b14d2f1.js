"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[1238],{450:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(5893),i=t(1151);const a={id:"track-recorder",title:"Record a Track"},s=void 0,o={id:"examples/track_recorder/track-recorder",title:"Record a Track",description:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:",source:"@site/docs/examples/track_recorder/README.md",sourceDirName:"examples/track_recorder",slug:"/examples/track_recorder/",permalink:"/docs/examples/track_recorder/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/track_recorder/README.md",tags:[],version:"current",frontMatter:{id:"track-recorder",title:"Record a Track"},sidebar:"examples",previous:{title:"Filter Client",permalink:"/docs/examples/filter_client/"},next:{title:"Plot a Track",permalink:"/docs/examples/track_plotter/"}},c={},l=[{value:"1. Install the farm-ng Brain ADK package",id:"1-install-the-farm-ng-brain-adk-package",level:2},{value:"2. Install the example&#39;s dependencies",id:"2-install-the-examples-dependencies",level:2},{value:"3. Execute the Python script",id:"3-execute-the-python-script",level:2},{value:"4. Customize the run",id:"4-customize-the-run",level:2},{value:"5. Code overview",id:"5-code-overview",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.admonition,{title:"Basic Knowledge Requirements",type:"info",children:[(0,r.jsx)(n.p,{children:"Before diving into this code, here's a quick heads-up on what you'll need to be familiar with:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Python Programming"}),": It's important to have a good grasp of Python, especially with concepts\nlike ",(0,r.jsx)(n.code,{children:"functions"}),", ",(0,r.jsx)(n.code,{children:"loops"}),", and ",(0,r.jsx)(n.code,{children:"classes"}),", since the example utilizes these fundamentals."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Asynchronous Programming with asyncio"}),": Familiarity with Python's asyncio for writing concurrent\ncode using the ",(0,r.jsx)(n.code,{children:"async/await"})," syntax."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/concepts/filter_service/",children:"farm-ng Filter Service Overview"})}),":\nThis overview provides a base understanding of the gRPC service the client you create will connect to."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/concepts/transforms_and_poses/",children:(0,r.jsx)(n.strong,{children:"farm-ng Transforms & Poses Overview"})}),":\nThis overview provides insight into coordinate frames, transforms,\nand poses as they pertain to autonomous systems and autonomous navigation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/concepts/tracks_and_waypoints/",children:(0,r.jsx)(n.strong,{children:"farm-ng Tracks & Waypoints Overview"})}),":\nThis overview provides insight into compiling poses as waypoints into a Track\nthat can be followed by the Amiga."]}),"\n"]})]}),"\n",(0,r.jsxs)(n.admonition,{title:"Warning",type:"caution",children:[(0,r.jsx)(n.p,{children:"The track follower examples will cause the Amiga to drive when the dashboard is in auto mode.\nMake sure the area is clear before running examples."}),(0,r.jsxs)(n.p,{children:["You can also run the examples when the Amiga dashboard is not in ",(0,r.jsx)(n.code,{children:"AUTO READY"})," or ",(0,r.jsx)(n.code,{children:"AUTO ACTIVE"}),"\nand see the commands being sent with the red needle on the auto page without the Amiga actually moving."]})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/farm-ng/farm-ng-amiga/blob/main/py/examples/track_recorder/main.py",children:(0,r.jsx)(n.strong,{children:"Record a Track"})}),"\nexample operates as a standalone Python script,\nin which an ",(0,r.jsx)(n.code,{children:"EventClient"})," to the filter running on an Amiga brain is created.\nThis example records the filter track from the state estimation filter running on the Amiga.\nWhen recording a track for the track follower to later follow,\nwe use the ",(0,r.jsx)(n.code,{children:"/track"})," output stream from the filter service."]}),"\n",(0,r.jsxs)(n.p,{children:["The requirements to run this example are to have a\n",(0,r.jsx)(n.a,{href:"/docs/intelligence-kit/brain/brain-v2/",children:(0,r.jsx)(n.strong,{children:"farm-ng brain"})})," running the ",(0,r.jsx)(n.code,{children:"filter service"}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"The state estimation filter service is a client of the following services:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"canbus"}),"\n",(0,r.jsx)(n.li,{children:"gps"}),"\n",(0,r.jsx)(n.li,{children:"oak0"}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["You can either run this example directly on a brain by ",(0,r.jsx)(n.code,{children:"ssh"}),"'ing in,\nor use your local PC.\nIf using your local PC, it should be either connected to the same local network as the brain\nor linked to it through tailscale."]}),"\n",(0,r.jsxs)(n.p,{children:["The filter service will add to the track whenever a sufficient distance,\nas a combination of linear and angular difference from the last track pose,\nhas passed (e.g., ",(0,r.jsx)(n.code,{children:"0.1"})," meters or radians)."]}),"\n",(0,r.jsxs)(n.p,{children:["A valid path for the existing track follower is one with motion that is either turn-in-place or forwards.\nForward motion can be either straight or curved.\nThe filter service will ",(0,r.jsx)(n.strong,{children:"NOT"})," add to the track under certain conditions\nthat would make following this track difficult or undesirable.\nThese include:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Poor state estimation results (lack of filter convergence)"}),"\n",(0,r.jsx)(n.li,{children:"State estimation missing required sensor data"}),"\n",(0,r.jsx)(n.li,{children:"GPS service is not connected to an RTK base station"}),"\n",(0,r.jsx)(n.li,{children:"Driving backwards"}),"\n",(0,r.jsx)(n.li,{children:"Discontinuities in the path"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"1-install-the-farm-ng-brain-adk-package",children:["1. Install the ",(0,r.jsx)(n.a,{href:"/docs/brain/brain-install",children:"farm-ng Brain ADK package"})]}),"\n",(0,r.jsx)(n.h2,{id:"2-install-the-examples-dependencies",children:"2. Install the example's dependencies"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"It is recommended to also install these dependencies and run the\nexample in the brain ADK virtual environment."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# assuming you're already in the amiga-dev-kit/ directory\ncd farm-ng-amiga/py/examples/track_recorder\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip3 install -r requirements.txt\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-execute-the-python-script",children:"3. Execute the Python script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python3 main.py --service-config service_config.json --track-name my_new_track\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["By default, the host address is assumed to be ",(0,r.jsx)(n.code,{children:"localhost"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["Once you've started the script,\ndrive your Amiga along the route you wish to record as a track for the track follower to later follow.\nWhen you are done driving the track, kill the script with ",(0,r.jsx)(n.code,{children:"ctrl"})," + ",(0,r.jsx)(n.code,{children:"C"}),".\nYou can then set the Amiga to follow this track by following the\n",(0,r.jsx)(n.a,{href:"/docs/examples/track_follower",children:(0,r.jsx)(n.strong,{children:"Track Follower Example"})}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"4-customize-the-run",children:"4. Customize the run"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to record the track on your laptop, by connecting with a gRPC client over Wifi,\nyou can change the ",(0,r.jsx)(n.code,{children:"host"})," field in ",(0,r.jsx)(n.code,{children:"service_config.json"})," from ",(0,r.jsx)(n.code,{children:"localhost"}),"\nto your robot's name (e.g., ",(0,r.jsx)(n.code,{children:"element-vegetable"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "name": "filter",\n    "port": 20001,\n    "host": "element-vegetable",\n    "log_level": "INFO",\n    "subscriptions": [\n        {\n            "uri": {\n                "path": "/track",\n                "query": "service_name=filter"\n            },\n            "every_n": 1\n        }\n    ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can optionally specify the ",(0,r.jsx)(n.code,{children:"--output-dir"})," to change the default directory\nin which your track file will be saved."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python3 main.py --help\n\nusage: amiga-track-recorder [-h] --service-config SERVICE_CONFIG --track-name TRACK_NAME\n                          [--output-dir OUTPUT_DIR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --service-config SERVICE_CONFIG\n                        The filter service config.\n  --track-name TRACK_NAME\n                        The name of the track.\n  --output-dir OUTPUT_DIR\n                        The directory to save the track to.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-code-overview",children:"5. Code overview"}),"\n",(0,r.jsxs)(n.p,{children:["In this example we use the ",(0,r.jsx)(n.code,{children:"EventClient"})," with the ",(0,r.jsx)(n.code,{children:"subscribe"})," method to receive the filter track stream."]}),"\n",(0,r.jsx)(n.p,{children:"In this example, we:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Request that the filter reset the tracking of the filter track with the ",(0,r.jsx)(n.code,{children:"/clear_track"})," request","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This will clear any previously hit criteria that would cause the filter to stop adding to the\ntrack. See above for more details."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Stream the ",(0,r.jsx)(n.code,{children:"/track"})," topic from the filter service"]}),"\n",(0,r.jsxs)(n.li,{children:["Write (or overwrite) the full ",(0,r.jsx)(n.code,{children:"FilterTrack"})," proto to disk every time a pose is added to the track","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This allows you to exit the program at anytime with the track you have recorded up to that point"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def main(service_config_path: Path, track_name: str, output_dir: Path) -> None:\n    """Run the filter service client to record a track.\n\n    Args:\n        service_config_path (Path): The path to the filter service config.\n        track_name (str): The name of the track.\n        output_dir (Path): The directory to save the track to.\n    """\n    # create a client to the filter service\n    config: EventServiceConfig = proto_from_json_file(service_config_path, EventServiceConfig())\n\n    # Clear the track so everything going forward is tracked\n    await EventClient(config).request_reply("/clear_track", Empty())\n\n    # Create a list to store the filter track states\n    filter_track_states: list[FilterState] = []\n\n    # Subscribe to the filter track topic\n    async for event, message in EventClient(config).subscribe(config.subscriptions[0], decode=True):\n\n        print("###################")\n        print("Adding to track:")\n        print(message)\n\n        # Add the filter state to the list\n        filter_track_states.append(message)\n\n        # Write the FilterTrack to disk, overwriting the file each time\n        if not proto_to_json_file(\n            output_dir / f"{track_name}.json", FilterTrack(states=filter_track_states, name=track_name)\n        ):\n            raise RuntimeError(f"Failed to write track to {output_dir}")\n\n\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="amiga-track-recorder")\n    parser.add_argument("--service-config", type=Path, required=True, help="The filter service config.")\n    parser.add_argument("--track-name", type=str, required=True, help="The name of the track.")\n    parser.add_argument(\n        "--output-dir", type=Path, default=Path(__file__).parent,\n        help="The directory to save the track to."\n    )\n    args = parser.parse_args()\n\n    if not args.output_dir.exists() or not args.output_dir.is_dir():\n        raise ValueError(f"Invalid output directory: {args.output_dir}")\n\n    if not args.track_name:\n        raise ValueError("No track name provided.")\n\n    asyncio.run(main(args.service_config, args.track_name, args.output_dir))\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["We highly recommend to have some basic knowledge about\n",(0,r.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio.html",children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"asyncio"})})}),"."]})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(7294);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);