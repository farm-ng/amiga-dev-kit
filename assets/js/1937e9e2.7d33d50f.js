"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[670],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),f=a,m=u["".concat(o,".").concat(f)]||u[f]||p[f]||i;return r?n.createElement(m,l(l({ref:t},d),{},{components:r})):n.createElement(m,l({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8617:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_label:"adk",title:"farm_ng.adk"},l=void 0,s={unversionedId:"reference/farm_ng/adk",id:"reference/farm_ng/adk",title:"farm_ng.adk",description:"BoardType Objects",source:"@site/docs/reference/farm_ng/adk.md",sourceDirName:"reference/farm_ng",slug:"/reference/farm_ng/adk",permalink:"/amiga-dev-kit/docs/reference/farm_ng/adk",draft:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/reference/farm_ng/adk.md",tags:[],version:"current",frontMatter:{sidebar_label:"adk",title:"farm_ng.adk"}},o={},c=[{value:"BoardType Objects",id:"boardtype-objects",level:2},{value:"get_board_type",id:"get_board_type",level:4},{value:"ticks_add",id:"ticks_add",level:4},{value:"ticks_diff",id:"ticks_diff",level:4},{value:"ticks_less",id:"ticks_less",level:4},{value:"Axis Objects",id:"axis-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"map",id:"map",level:4}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"boardtype-objects"},"BoardType Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class BoardType()\n")),(0,a.kt)("p",null,"Enum representing the Amiga Board type."),(0,a.kt)("h4",{id:"get_board_type"},"get","_","board","_","type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_board_type() -> BoardType\n")),(0,a.kt)("p",null,"Return the Board type based on the operating system."),(0,a.kt)("h4",{id:"ticks_add"},"ticks","_","add"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def ticks_add(ticks, delta)\n")),(0,a.kt)("p",null,"Add a delta to a base number of ticks, performing wraparound at 2**29ms."),(0,a.kt)("h4",{id:"ticks_diff"},"ticks","_","diff"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def ticks_diff(ticks1, ticks2)\n")),(0,a.kt)("p",null,"Compute the signed difference between two ticks values, assuming that they are within 2**28 ticks"),(0,a.kt)("h4",{id:"ticks_less"},"ticks","_","less"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def ticks_less(ticks1, ticks2)\n")),(0,a.kt)("p",null,"Return true iff ticks1 is less than ticks2, assuming that they are within 2**28 ticks"),(0,a.kt)("h2",{id:"axis-objects"},"Axis Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Axis()\n")),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(min_value, deadzone_m1, deadzone_p1, max_value)\n")),(0,a.kt)("p",null,"min, -deadzone, +deadzone, max"),(0,a.kt)("h4",{id:"map"},"map"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def map(v)\n")),(0,a.kt)("p",null,"returns -1 .. +1"))}p.isMDXComponent=!0}}]);