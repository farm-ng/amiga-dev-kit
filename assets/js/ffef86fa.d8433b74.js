"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[5958],{1692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=t(5893),r=t(1151);const i={id:"cansniffer",title:"Cansniffer Example"},o=void 0,a={id:"examples/cansniffer/cansniffer",title:"Cansniffer Example",description:"Link to cansniffer/code.py",source:"@site/docs/examples/cansniffer/README.md",sourceDirName:"examples/cansniffer",slug:"/examples/cansniffer/",permalink:"/docs/examples/cansniffer/",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/examples/cansniffer/README.md",tags:[],version:"current",frontMatter:{id:"cansniffer",title:"Cansniffer Example"},sidebar:"examples",previous:{title:"Hello Main Loop Example",permalink:"/docs/examples/hello_main_loop/"},next:{title:"FPV Example",permalink:"/docs/examples/FPV/"}},l={},c=[{value:"Link to <code>cansniffer/code.py</code>",id:"link-to-cansniffercodepy",level:2},{value:"Parts required",id:"parts-required",level:2},{value:"CansnifferApp Breakdown",id:"cansnifferapp-breakdown",level:2},{value:"CAN Introduction",id:"can-introduction",level:2},{value:"Instructions",id:"instructions",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"link-to-cansniffercodepy",children:(0,s.jsxs)(n.a,{href:"https://github.com/farm-ng/amiga-dev-kit/blob/main/circuitpy/examples/cansniffer/code.py",children:["Link to ",(0,s.jsx)(n.code,{children:"cansniffer/code.py"})]})}),"\n",(0,s.jsxs)(n.p,{children:["This example covers a simple tool for listening to all CAN Id's\nstreaming on the bus\nand measure simple statistics about the streamed messages.\nThe example is inspired by the\n",(0,s.jsx)(n.a,{href:"https://manpages.debian.org/testing/can-utils/cansniffer.1.en.html",children:(0,s.jsx)(n.strong,{children:"cansniffer command line tool from can-utils"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You should read through the\n",(0,s.jsx)(n.a,{href:"/docs/examples/hello_main_loop/",children:(0,s.jsx)(n.strong,{children:"Hello Main Loop"})}),"\nexample first, as some required concepts are explained there."]}),"\n",(0,s.jsx)(n.h2,{id:"parts-required",children:"Parts required"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://farm-ng.com/products/microcontroller-kit",children:(0,s.jsx)(n.strong,{children:"farm-ng microcontroller kit"})})," (w/ USB-C cable)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"cansnifferapp-breakdown",children:"CansnifferApp Breakdown"}),"\n",(0,s.jsxs)(n.p,{children:["Here we create ",(0,s.jsx)(n.code,{children:"CansnifferApp"})," as a very simple example of the\ntypes of ",(0,s.jsx)(n.code,{children:"AppClass"})," you can create."]}),"\n",(0,s.jsxs)(n.p,{children:["In our app, we create a ",(0,s.jsx)(n.code,{children:"TickRepeater"})," that will cause our print\nstatements to execute every 1000 ms (every second).\nIn those print statements (in ",(0,s.jsx)(n.code,{children:"CansnifferApp.iter()"}),"), we first\nclear the console with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Python",children:'print("\\033[2J", end="")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["then print metrics about the CAN bus that are already measured by\ndefault in ",(0,s.jsx)(n.code,{children:"MainLoop"}),", returned by the ",(0,s.jsx)(n.code,{children:"debug_str()"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Python",children:"print(self.main_loop.debug_str())\n"})}),"\n",(0,s.jsx)(n.p,{children:"These statistics include transmission and receive CAN errors,\nas well as all CAN Id's received by the microcontroller's CAN\ninterface, with statistics on the time between received messages\nfor each CAN Id."}),"\n",(0,s.jsxs)(n.admonition,{title:"Take it further:",type:"info",children:[(0,s.jsxs)(n.p,{children:["You could also add memory statistics to the printed lines\nby adding the following line to the ",(0,s.jsx)(n.code,{children:"CansnifferApp"})," constructor:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Python",children:"self.main_loop.show_mem = True\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"can-introduction",children:"CAN Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["In general, we ",(0,s.jsx)(n.em,{children:"mostly"})," follow the CANopen standards.\nA recommended reading is the\n",(0,s.jsx)(n.a,{href:"https://www.csselectronics.com/pages/canopen-tutorial-simple-intro",children:(0,s.jsx)(n.strong,{children:"CSS Electronics CANopen tutorial"})}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Some of the third-party, auxiliary components we have integrated\ninto the system do not allow for strict adherence to the CANopen\nstandards.\nFor our core system, we adhere closely to the standards."})}),"\n",(0,s.jsx)(n.p,{children:"In this standard, messages are passed using function codes based\non their use.\nEach component has a node ID identifier used to identify either\nthe intended recipient or the source component of each message\nsent on the CAN bus.\nIn this way, the CAN Id (COB-ID) encodes both the type of message\nand either the intended recipient or the source of each message."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"If you are unfamiliar with CAN bus,\nbut are familiar with publisher/subscriber frameworks,\none way to think about this is that every component is publishing\nto the CAN bus.\nEvery other component on the CAN bus can subscribe to those\nmessages, or ignore them."})}),"\n",(0,s.jsxs)(n.p,{children:["The first CANopen standard to familiarize yourself with before\ninteracting with the Amiga dev kit is the\n",(0,s.jsx)(n.a,{href:"https://www.csselectronics.com/pages/canopen-tutorial-simple-intro#pdo-process-data-object",children:(0,s.jsx)(n.strong,{children:"PDO Service"})}),"\nused for sharing realtime information.\nOur dashboard is in constant communication with the pendant and\nall motor controllers."]}),"\n",(0,s.jsxs)(n.p,{children:["We stream requests on the ",(0,s.jsx)(n.code,{children:"RPDO1"})," channel, and respond on the\n",(0,s.jsx)(n.code,{children:"TPDO1"})," channel."]}),"\n",(0,s.jsx)(n.p,{children:"For example, key examples of our PDO sets include:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Source"}),(0,s.jsx)(n.th,{children:"Destination"}),(0,s.jsx)(n.th,{children:"node id"}),(0,s.jsx)(n.th,{children:"RPDO Request"}),(0,s.jsx)(n.th,{children:"TPDO response"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Pendant"}),(0,s.jsx)(n.td,{children:"Dashboard"}),(0,s.jsx)(n.td,{children:"Pendant"}),(0,s.jsx)(n.td,{children:"Joystick, buttons"}),(0,s.jsx)(n.td,{children:"LEDs, backlight"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Dashboard"}),(0,s.jsx)(n.td,{children:"Motor Controller (x4)"}),(0,s.jsx)(n.td,{children:"Motor Controller ID"}),(0,s.jsx)(n.td,{children:"Status, rpm"}),(0,s.jsx)(n.td,{children:"Status, voltage, rpm, current"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Auto controller"}),(0,s.jsx)(n.td,{children:"Dashboard"}),(0,s.jsx)(n.td,{children:"Dashboard"}),(0,s.jsx)(n.td,{children:"State, speed, angular rate"}),(0,s.jsx)(n.td,{children:"State, speed, angular rate"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["When possible, the RPDO requests are followed and the values\nmeasured when following these requests are sent as a TPDO\nresponse.\nWhen the requests cannot be followed, the reason should be\ninferable from the TPDO response.\nThe ",(0,s.jsx)(n.a,{href:"/docs/examples/hello_main_loop/",children:(0,s.jsx)(n.strong,{children:"Hello World Auto-mode (hello_main_loop)"})}),"\nprovides the ability to interact\ndirectly with the Auto controller / dashboard PDO set of RPDO\nrequest & TPDO response.\nTo test this, try requesting control of the robot when it is\n",(0,s.jsx)(n.em,{children:"NOT"})," in an ",(0,s.jsx)(n.code,{children:"AUTO READY"})," state."]}),"\n",(0,s.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Steps 1 - 3 are explained in greater detail in the\n",(0,s.jsx)(n.a,{href:"/docs/examples/hello_main_loop/",children:(0,s.jsx)(n.strong,{children:"Hello Auto Mode"})}),"\nintroductory example."]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Connect your\n",(0,s.jsx)(n.a,{href:"https://farm-ng.com/products/microcontroller-kit",children:(0,s.jsx)(n.strong,{children:"farm-ng microcontroller kit"})}),"\nto your PC."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["From ",(0,s.jsx)(n.code,{children:"amiga-dev-kit/circuitpy/"}),", drop the ",(0,s.jsx)(n.code,{children:"code.py"})," file and\nthe ",(0,s.jsx)(n.code,{children:"lib/"})," folder directly into the root of the mounted\n",(0,s.jsx)(n.code,{children:"CIRCUITPY"})," drive."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"This assumes you have already cloned the amiga-dev-kit repo."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd <to_your_base_directory>\ngit clone git@github.com:farm-ng/amiga-dev-kit.git\n"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open the serial console."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"You should now see the can statistics printed and updated\nevery 1000 ms."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If the serial console is blank, click into the serial console,\ncancel the current execution with ",(0,s.jsx)(n.code,{children:"crtl+C"}),", and soft reboot the\nmicrocontroller with ",(0,s.jsx)(n.code,{children:"ctrl+D"})," ."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53625197/187537132-e89ea79b-2ae1-4ccb-9d9a-8f3ffd899565.png",alt:"cansniffer_demo"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);