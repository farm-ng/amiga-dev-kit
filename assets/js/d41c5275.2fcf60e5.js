"use strict";(self.webpackChunkamiga_developers_website=self.webpackChunkamiga_developers_website||[]).push([[2083],{5837:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(5893),a=t(1151);const s={id:"template-overview",title:"02 - Template Overview"},o="Template Overview",r={id:"tutorials/introduction/template-overview",title:"02 - Template Overview",description:"This section describes the Python and kivy code in the",source:"@site/docs/tutorials/introduction/02_template_overview.md",sourceDirName:"tutorials/introduction",slug:"/tutorials/introduction/template-overview",permalink:"/docs/tutorials/introduction/template-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/farm-ng/amiga-dev-kit/tree/main/website/docs/tutorials/introduction/02_template_overview.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"template-overview",title:"02 - Template Overview"},sidebar:"examples",previous:{title:"01 - Installing Templates",permalink:"/docs/tutorials/introduction/getting-started-kivy"},next:{title:"00 - Camera Streamer Overview",permalink:"/docs/tutorials/camera_streamer/camera-streamer-overview"}},l={},c=[{value:"Kivy",id:"kivy",level:2},{value:"RelativeLayout",id:"relativelayout",level:3},{value:"Back button",id:"back-button",level:3},{value:"Python",id:"python",level:2},{value:"TemplateApp Class",id:"templateapp-class",level:2},{value:"Building Kivy Frontend",id:"building-kivy-frontend",level:3},{value:"on_exit_button",id:"on_exit_button",level:3},{value:"app_func",id:"app_func",level:3},{value:"template_function",id:"template_function",level:3},{value:"Command line args and execution",id:"command-line-args-and-execution",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"template-overview",children:"Template Overview"}),"\n",(0,i.jsxs)(n.p,{children:["This section describes the Python and kivy code in the\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template-kivy",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"amiga-app-template-kivy"})})}),",\nto help understand the basics before we get into more complicated examples."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Throughout this tutorial we'll explain the kivy app created in\nthis example, but this is not intended as a thorough introduction\nto using kivy. Try the ",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/tutorials-index.html",children:(0,i.jsx)(n.strong,{children:"kivy tutorials"})}),"\nand use the ",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-index.html",children:(0,i.jsx)(n.strong,{children:"kivy API"})}),"\nfor more information on creating custom applications with kivy."]})}),"\n",(0,i.jsxs)(n.p,{children:["For understanding this turotial, there are two main files that we will be looking at,\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template-kivy/tree/main/src/res",children:(0,i.jsx)(n.strong,{children:"res/main.kv"})})," and\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template-kivy/tree/main/src",children:(0,i.jsx)(n.strong,{children:"main.py"})}),". main.kv includes\nthe kivy language definition of our user interface and main.py includes the executable python logic\nof the application."]}),"\n",(0,i.jsx)(n.h2,{id:"kivy",children:"Kivy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template-kivy/tree/main/src/res",children:(0,i.jsx)(n.strong,{children:"res/main.kv"})}),"\nis where we define our kivy string. There is one component of this application,\nthe RelativeLayout that contains two elements, a Button and a Label. The back button\nis critical to the functionality of these templates as they are used to return to the app\nscreen, the label is a textbox that we will update from main.py."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'RelativeLayout:\n    Button:\n        id: back_btn_layout\n        pos_hint: {"x": 0.0, "top": 1.0}\n        background_color: 0, 0, 0, 0\n        size_hint: 0.1, 0.1\n        background_normal: "assets/back_button.png"\n        on_release: app.on_exit_btn()\n        Image:\n            source: "assets/back_button_normal.png" if self.\n            parent.state == "normal" else "assets/\n            back_button_down.png"\n            pos: self.parent.pos\n            size: self.parent.size\n    Label:\n        id: counter_label\n        text: "Tic: 0"\n        font_size: 40\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Next we define our application in the Kv language.\nThis definition can be a ",(0,i.jsx)(n.code,{children:'"""'})," string at the top of a ",(0,i.jsx)(n.code,{children:".py"})," file\nor can be defined in a separate ",(0,i.jsx)(n.code,{children:".kv"})," file.\nEither can be imported by the\n",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.lang.builder.html",children:(0,i.jsx)(n.strong,{children:"kivy Builder"})}),".\nHere we use a separate .kv file\n",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template/blob/main/src/res/main.kv",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"res/main.py"})})}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"relativelayout",children:"RelativeLayout"}),"\n",(0,i.jsxs)(n.p,{children:["Two key components of kivy are\n",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/gettingstarted/layouts.html#",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Layouts"})})})," and\n",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.html",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Widgets"})})}),".\nThe root of our template app is a ",(0,i.jsx)(n.code,{children:"RelativeLayout"}),", which\ncontains a ",(0,i.jsx)(n.code,{children:"Button"})," and a ",(0,i.jsx)(n.code,{children:"Label"})," widget.\nThe ",(0,i.jsx)(n.code,{children:"RelativeLayout"})," allows us to position the\n",(0,i.jsx)(n.a,{href:"#back-button",children:(0,i.jsx)(n.strong,{children:"Back button"})})," (and any widgets or nested\nlayouts we may add in the future) in relative coordinates."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Reference: ",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.relativelayout.html",children:(0,i.jsx)(n.strong,{children:"Relative Layout"})})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"back-button",children:"Back button"}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"Button"})," is used to exit the app when it is pressed, by\ncalling the ",(0,i.jsx)(n.a,{href:"#on_exit_button",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"TemplateApp.on_exit_btn()"})})}),"\nmethod."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["To be precise it's actually when the button is released due to\nusing the ",(0,i.jsx)(n.code,{children:"on_release:"})," keyword."]})}),"\n",(0,i.jsxs)(n.p,{children:["Since the ",(0,i.jsx)(n.code,{children:"TemplateApp"})," inherits from the kivy ",(0,i.jsx)(n.code,{children:"App"})," class,\nmethods and variables of the ",(0,i.jsx)(n.code,{children:"TemplateApp"})," can be linked with the\n",(0,i.jsx)(n.code,{children:"app.foo_variable"})," or ",(0,i.jsx)(n.code,{children:"app.bar_method()"}),". In this example, the Button is\nlinked to ",(0,i.jsx)(n.code,{children:"on_exit_btn()"})," method to exit the application.\nWe define the ",(0,i.jsx)(n.code,{children:"Button"})," with two images, one that shows most of\nthe time, and another that shows while the button is pressed down.\nYou can also define a button with a string, if you want to\nquickly add buttons without finding an icon."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/google/material-design-icons",children:(0,i.jsx)(n.strong,{children:"Material Icons"})}),"\nis a nice place to find symbols to use for app buttons / UI\nfeatures."]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Reference: ",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.uix.button.html",children:(0,i.jsx)(n.strong,{children:"Button"})})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, we will break down the major components of ",(0,i.jsx)(n.a,{href:"https://github.com/farm-ng/amiga-app-template-kivy/blob/main/src/main.py",children:(0,i.jsx)(n.strong,{children:"main.py"})})]}),"\n",(0,i.jsx)(n.p,{children:"The template starts with generic Python imports that are used in\nthe app, followed by the custom lib imports, then kivy imports\nand configuration."}),"\n",(0,i.jsxs)(n.p,{children:["Before any kivy imports, we must explicitly state that the\ncommand line args for the app are to be used, rather than the\ndefault kivy command line args, with\n",(0,i.jsx)(n.code,{children:'os.environ["KIVY_NO_ARGS"] = "1"'}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Notice we import kivy ",(0,i.jsx)(n.code,{children:"Config"})," and define the config parameters\nwe recommend for running kivy applications on the brain.\nThis should come before importing any other Kivy modules, as\nstated in\n",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.config.html",children:(0,i.jsx)(n.strong,{children:"kivy - Configuration object"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Finally we import the remaining kivy modules with the\n",(0,i.jsx)(n.code,{children:"# noqa: E402"})," flag, so any ",(0,i.jsx)(n.code,{children:"pre-commit"})," formatters don't move\nthese imports above the kivy configuration setting."]}),"\n",(0,i.jsx)(n.h2,{id:"templateapp-class",children:"TemplateApp Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'class TemplateApp(App):\n    """Base class for the main Kivy app."""\n\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.counter: int = 0\n\n        self.async_tasks: List[asyncio.Task] = []\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We define the ",(0,i.jsx)(n.code,{children:"TemplateApp"})," to inherit from the kivy\n",(0,i.jsx)(n.a,{href:"https://kivy.org/doc/stable/api-kivy.app.html",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"App"})})})," class,\nso it has all the features of a generic ",(0,i.jsx)(n.code,{children:"App"}),", plus anything we\nadd to it."]}),"\n",(0,i.jsxs)(n.p,{children:["All we add here is a placeholder for the ",(0,i.jsx)(n.code,{children:"TemplateApp"})," class\nmethods that will each be added as an ",(0,i.jsx)(n.code,{children:"asyncio.Task"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"building-kivy-frontend",children:"Building Kivy Frontend"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'def build(self):\n    return Builder.load_file("res/main.kv")\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"build"})," is a default kivy ",(0,i.jsx)(n.code,{children:"App"})," method that we must overwrite\nwith our app's details."]}),"\n",(0,i.jsx)(n.h3,{id:"on_exit_button",children:"on_exit_button"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'def on_exit_btn(self) -> None:\n    """Kills the running kivy application."""\n    App.get_running_app().stop()\n'})}),"\n",(0,i.jsx)(n.p,{children:"This simple method stops the running kivy app.\nWhen an app was launched on the Amiga Brain through the Launcher\napp, this will return the Brain state to the Launcher app."}),"\n",(0,i.jsx)(n.h3,{id:"app_func",children:"app_func"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"async def app_func(self):\n    async def run_wrapper() -> None:\n        # we don't actually need to set asyncio as the lib\n        # because it is\n        # the default, but it doesn't hurt to be explicit\n        await self.async_run(async_lib=\"asyncio\")\n        for task in self.async_tasks:\n            task.cancel()\n\n    # Placeholder task\n    self.async_tasks.append(asyncio.ensure_future(self.\n    template_function()))\n\n    return await asyncio.gather(run_wrapper(), *self.async_tasks)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We use the ",(0,i.jsx)(n.code,{children:"app_func"})," pattern, with the nested ",(0,i.jsx)(n.code,{children:"run_wrapper"}),", to\nbuild, run, and manage the list of long duration, asynchronous\ntasks required by the app."]}),"\n",(0,i.jsxs)(n.p,{children:["Here we build the list of ",(0,i.jsx)(n.code,{children:"async"})," methods that will run\nsimultaneously for the life of our app.\nCurrently this list only consists of a placeholder method called\n",(0,i.jsx)(n.a,{href:"#template_function",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"template_function()"})})})," that we will\nlater replace with tasks that actually do something."]}),"\n",(0,i.jsxs)(n.p,{children:["Each method is added as an ",(0,i.jsx)(n.code,{children:"asyncio.Task"})," following the pattern\nused to add ",(0,i.jsx)(n.code,{children:"self.template_function()"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"template_function",children:"template_function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'async def template_function(self) -> None:\n    """Placeholder forever loop."""\n    while self.root is None:\n        await asyncio.sleep(0.01)\n\n    while True:\n        await asyncio.sleep(1.0)\n\n        # increment the counter using internal libs and update\n        # the gui\n        self.counter = ops.add(self.counter, 1)\n        self.root.ids.counter_label.text = (\n            f"{\'Tic\' if self.counter % 2 == 0 else \'Tac\'}: {self.\n            counter}"\n        )\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In all of our ",(0,i.jsx)(n.code,{children:"async"})," functions, we should wait for the root of\nthe kivy App to be initialized before doing anything in the\nfunction.\nOften these functions will rely on the kivy app, so this prevents\nunexpected crashes."]}),"\n",(0,i.jsxs)(n.p,{children:["In this placeholder, the ",(0,i.jsx)(n.code,{children:"while"})," loop doesn't do anything besides\nupdate the text of the ",(0,i.jsx)(n.code,{children:"Label"})," widget to alternate between\n",(0,i.jsx)(n.code,{children:"Tic"})," & ",(0,i.jsx)(n.code,{children:"Tac"})," every second."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The custom defined async functions must be defined with the\n",(0,i.jsx)(n.code,{children:"async"})," decorator and any blocking tasks with the ",(0,i.jsx)(n.code,{children:"await"})," keyword."]})}),"\n",(0,i.jsx)(n.h2,{id:"command-line-args-and-execution",children:"Command line args and execution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'if __name__ == "__main__":\n    parser = argparse.ArgumentParser(prog="template-app")\n\n    # Add additional command line arguments here\n\n    args = parser.parse_args()\n\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_until_complete(TemplateApp().app_func())\n    except asyncio.CancelledError:\n        pass\n    loop.close()\n'})}),"\n",(0,i.jsx)(n.p,{children:"Finally we run the app!\nThis is infrastructure in place for defining command line args,\nwhich you'll likely want in your apps so you don't have to hard\ncode configurations, we will get into some alternatives in the\nnext templates."}),"\n",(0,i.jsxs)(n.p,{children:["To run the app, either run .",(0,i.jsx)(n.code,{children:"/install.sh"})," with the updated manifest.json, or run it locally using\n",(0,i.jsx)(n.code,{children:"./entry.sh"})," from your app directory."]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var i=t(7294);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);