syntax = "proto3";

package farm_ng.oak;

service OakService {
  rpc streamFrames(StreamFramesRequest) returns (stream StreamFramesReply) {}
  rpc getServiceState(GetServiceStateRequest) returns (GetServiceStateResult) {}
  rpc startService(StartServiceRequest) returns (StartServiceResult) {}
  rpc stopService(StopServiceRequest) returns (StopServiceResult) {}
  rpc pauseService(PauseServiceRequest) returns (PauseServiceResult) {}
}

enum ReplyStatus {
  OK = 0;
  FAILED = 1;
}

enum OakServiceState {
  UNKNOWN = 0;
  STOPPED = 1;
  RUNNING = 2;
  IDLE = 3;
  UNAVAILABLE = 4;
}

message StopServiceRequest {
  string message = 1;
}

message StopServiceResult {
  string message = 1;
  ReplyStatus status = 2;
}

message StartServiceRequest {
  string message = 1;
}

message StartServiceResult {
  string message = 1;
  ReplyStatus status = 2;
}

message PauseServiceRequest {
  string message = 1;
}

message PauseServiceResult {
  string message = 1;
  ReplyStatus status = 2;
}

message GetServiceStateRequest {
  string message = 1;
}

message GetServiceStateResult {
  string state_name = 1;
  OakServiceState state = 2;
  ReplyStatus status = 3;
}

message StreamFramesRequest {
  int32 every_n = 1; // desired stream frame rate.
}

message StreamFramesReply {
  ReplyStatus status = 1;
  OakSyncFrame frame = 2;
}

message Vec3F32 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message CameraSettings {
  bool auto_exposure = 1;
  uint32 exposure_time = 2;
  uint32 iso_value = 3;
  uint32 lens_pos = 4;
}

message OakImageMeta {
  int64 category = 1; // DepthAI catetory
  int64 instance_num = 2;  //DepthAI instance number
  int64 sequence_num = 3;   // for synchronization between left, right and stereo
  double timestamp = 4; // seconds, synchronized with host monotonic
  double timestamp_device = 5; // seconds, device monotonic clock
  CameraSettings settings = 6;
}

message OakFrame {
  OakImageMeta meta = 1;
  bytes image_data = 2; // decode/encode with cv2.imencode/cv2.imdecode
}

message OakGyro {
  Vec3F32 gyro = 1;
  int32 sequence_num = 2;
  string accuracy = 3;
  double timestamp = 4;
  double timestamp_device = 5;
}

message OakAccelero {
  Vec3F32 accelero = 1;
  int32 sequence_num = 2;
  string accuracy = 3;
  double timestamp = 4;
  double timestamp_device = 5;
}

message OakImuPacket {
  OakGyro gyro_packet = 1;
  OakAccelero accelero_packet = 2;
}

message OakImuPackets {
  repeated OakImuPacket packets = 1;
}

message OakDeviceInfo {
  string name = 1;
  string mxid = 2;
  string ip = 3;
}

message OakSyncFrame {
  OakFrame left = 1;
  OakFrame right = 2;
  OakFrame rgb = 3;
  OakFrame disparity = 4;
  OakNNData nn = 5;
  OakImuPackets imu_packets = 6;
  int64 sequence_num = 7;
  OakDeviceInfo device_info = 8;
}

message OakNNData {
  OakImageMeta meta = 1;
  uint32 num_channels = 2;
  uint32 height = 3;
  uint32 width = 4;
  bytes data = 5;
}

message Pair {
  string key = 1;
  string value = 2;
}

message Metadata {
  repeated Pair pairs = 1;
}

message OakDataSample {
  OakSyncFrame frame = 1;
  Metadata metadata = 2;
}
